2022-07-12 13:23:35.307511: W tensorflow/stream_executor/platform/default/dso_loader.cc:64] Could not load dynamic library 'libcublas.so.11'; dlerror: libcublas.so.11: cannot open shared object file: No such file or directory
2022-07-12 13:23:35.307753: W tensorflow/stream_executor/platform/default/dso_loader.cc:64] Could not load dynamic library 'libcublasLt.so.11'; dlerror: libcublasLt.so.11: cannot open shared object file: No such file or directory
2022-07-12 13:23:35.307881: W tensorflow/stream_executor/platform/default/dso_loader.cc:64] Could not load dynamic library 'libcufft.so.10'; dlerror: libcufft.so.10: cannot open shared object file: No such file or directory
2022-07-12 13:23:35.308021: W tensorflow/stream_executor/platform/default/dso_loader.cc:64] Could not load dynamic library 'libcurand.so.10'; dlerror: libcurand.so.10: cannot open shared object file: No such file or directory
2022-07-12 13:23:35.308141: W tensorflow/stream_executor/platform/default/dso_loader.cc:64] Could not load dynamic library 'libcusolver.so.11'; dlerror: libcusolver.so.11: cannot open shared object file: No such file or directory
2022-07-12 13:23:35.308282: W tensorflow/stream_executor/platform/default/dso_loader.cc:64] Could not load dynamic library 'libcusparse.so.11'; dlerror: libcusparse.so.11: cannot open shared object file: No such file or directory
2022-07-12 13:23:35.308409: W tensorflow/stream_executor/platform/default/dso_loader.cc:64] Could not load dynamic library 'libcudnn.so.8'; dlerror: libcudnn.so.8: cannot open shared object file: No such file or directory
2022-07-12 13:23:35.308459: W tensorflow/core/common_runtime/gpu/gpu_device.cc:1850] Cannot dlopen some GPU libraries. Please make sure the missing libraries mentioned above are installed properly if you would like to use GPU. Follow the guide at https://www.tensorflow.org/install/gpu for how to download and setup the required libraries for your platform.
Skipping registering GPU devices...
I0712 13:23:35.308917 140343662851904 train.py:67] ===========Config Dict============
I0712 13:23:35.309153 140343662851904 train.py:68] available_devices:
- 0
- 1
- 2
- 3
base_type: dual_encoder
batch_size: 4
checkpoint_freq: 10000
data_dir: google_datasets/doc_retrieval/tsv_data/
emb_dim: 128
eval_frequency: 200
factors: constant * linear_warmup * rsqrt_decay
learning_rate: 0.05
max_eval_target_length: 200
max_length: 4000
max_predict_token_length: 50
max_target_length: 200
mlp_dim: 512
model_type: linformer
num_eval_steps: 50
num_heads: 4
num_layers: 4
num_train_steps: 1001
pooling_mode: CLS
prompt: ''
qkv_dim: 128
random_seed: 0
restore_checkpoints: true
sampling_temperature: 0.6
sampling_top_k: 20
save_checkpoints: true
task_name: aan_pairs
tokenizer: char
trial: 0
vocab_file_path: google_datasets/doc_retrieval/aan/
warmup: 1000
weight_decay: 0.1

I0712 13:23:35.321485 140343662851904 xla_bridge.py:340] Unable to initialize backend 'tpu_driver': NOT_FOUND: Unable to find driver in registry given worker: 
I0712 13:23:36.489389 140343662851904 xla_bridge.py:340] Unable to initialize backend 'rocm': NOT_FOUND: Could not find registered platform with name: "rocm". Available platform names are: CUDA Host Interpreter
I0712 13:23:36.490041 140343662851904 xla_bridge.py:340] Unable to initialize backend 'tpu': module 'jaxlib.xla_extension' has no attribute 'get_tpu_client'
I0712 13:23:36.490258 140343662851904 train.py:80] GPU devices: [GpuDevice(id=0, process_index=0), GpuDevice(id=1, process_index=0), GpuDevice(id=2, process_index=0), GpuDevice(id=3, process_index=0)]
INFO:tensorflow:google_datasets/doc_retrieval/tsv_data/aan_pairs_train.tsv
I0712 13:23:36.490402 140343662851904 input_pipeline.py:32] google_datasets/doc_retrieval/tsv_data/aan_pairs_train.tsv
INFO:tensorflow:google_datasets/doc_retrieval/tsv_data/aan_pairs_eval.tsv
I0712 13:23:36.558187 140343662851904 input_pipeline.py:32] google_datasets/doc_retrieval/tsv_data/aan_pairs_eval.tsv
INFO:tensorflow:google_datasets/doc_retrieval/tsv_data/aan_pairs_test.tsv
I0712 13:23:36.589114 140343662851904 input_pipeline.py:32] google_datasets/doc_retrieval/tsv_data/aan_pairs_test.tsv
I0712 13:23:38.990703 140343662851904 input_pipeline.py:60] Data sample: OrderedDict([('label', 0.0), ('id1', b'W06-3104'), ('id2', b'W14-2105'), ('text1', b"b'5 Conclusions With quasi-synchronous grammars, we have presented a new approach to syntactic MT: constructing a monolingual target-language grammar that describes the aligned translations of a source-language sentence. We described a simple parameterization 6For German ? English MT, one would use a German ? English QCFG as above, but an English ? German channel model. In this arguably inappropriate comparison, Figure 4 shows, the Model 4 channel model produces slightly better word alignments than the QG. 29 Permitted configurations AER AER AER at 1k 10k 100k ? or parent-child (a) 40.69 39.03 33.62 + child-parent (b) 43.17 39.78 33.79 + same node (c) 43.22 40.86 34.38 + all breakages (g) 37.63 30.51 25.99 + siblings (d) 37.87 33.36 29.27 + grandparent-grandchild (e) 36.78 32.73 28.84 + c-command (f) 37.04 33.51 27.45 Table 2: Alignment error rate (%) with different dependency configurations allowed.  0.2  0.25  0.3  0.35  0.4  0.45  0.5  1000  10000  100000  1e+06 alig nm ent  err or r ate training sentence pairs QCFGGiza4Giza4 bk Figure 4: Alignment error rate with best model (all breakages). The QCFG consistently beat one GIZA++ model and was close to the other. with gradually increasing syntactic domains of locality, and estimated those parameters on GermanEnglish bitext. The QG formalism admits many more nuanced options for features than we have exploited. In particular, we now are exploring log-linear QGs that score overlapping elementary trees of T2 while considering the syntactic configuration and lexical content of the T1 nodes to which each elementary tree aligns. Even simple QGs, however, turned out to do quite well. Our evaluation on a German-English wordalignment task showed them to be competitive with IBM model 4?consistently beating the GermanEnglish direction by several percentage points of alignment error rate and within 1% AER of the English-German direction. In particular, alignment accuracy benefited from allowing syntactic breakages between the two dependency structures. We are also working on a translation decoding using QG. Our first system uses the QG to find optimal T2 aligned to T1 and then extracts a synchronous tree-substitution grammar from the aligned trees. Our second system searches a target-language vocabulary for the optimal T2 given the input T1.Acknowledgements This work was supported by a National Science Foundation Graduate Research Fellowship for the first author and by NSF Grant No. 0313193.'"), ('text2', b"b'1 Introduction Argumentation mining is a relatively new field focusing on identifying and extracting argumentative structures in documents. An argument is typically defined as a conclusion with supporting 1 In this work, even unsupported propositions are consider part of an argument. Not disregarding such implicit arguments allows us to discuss the types of support that can further be provided to strengthen the argument, as a form of assessment. 2 Verifiable Experiential propositions are verifiable propositions about personal state or experience. See Table 1 for examples. 3 We are assuming that there is no background knowledge that eliminates the need of support. premises, which can be conclusions of other arguments themselves (Toulmin, 1958; Toulmin et al., 1979; Pollock, 1987). To date, much of the argumentation mining research has been conducted on domains like news articles, parliamentary records and legal documents, where the documents contain well-formed explicit arguments, i.e. propositions with supporting reasons and evidence present in the text (Moens et al., 2007; Palau and Moens, 2009; Wyner et al., 2010; Feng and Hirst, 2011; Ashley and Walker, 2013). Unlike documents written by professionals, online user comments often contain arguments with inappropriate or missing justification. One way to deal with such implicit arguments is to simply disregard them and focus on extracting arguments containing proper support (Villalba and Saint-Dizier, 2012; Cabrio and Villata, 2012). However, recognizing such propositions as part of an argument, 4 and determining the appropriate types of support can be useful for assessing the adequacy of the supporting information, and in turn, the strength of the whole argument. Consider the following examples: How much does a small carton of milk cost? 1 More children should drink milk 2 , because children who drink milk everyday are taller than those who don?t 3 . Children would want to drink milk, anyway 4 . Firstly, Sentence 1 does not need any support, nor is it part of an argument. Next, Proposition 2 is an unverifiable proposition because it cannot be proved with objective evidence, due to the value judgement. Instead, it can be supported by a reason explaining why it may be true. If the reason, Proposition 3, were not true, the whole ar4 Not all sentences in user comments are part of an argument, e.g. questions and greetings. We address this in Section 4.1 29 gument would fall apart, giving little weight to Proposition 2. Thus, an objective evidence supporting Proposition 3, which is a verifiable proposition, could be provided to strengthen the argument. Lastly, as Proposition 4 is unverifiable, we cannot expect an objective evidence that proves it, but a reason as its support. Note that providing a reason why Proposition 3 might be true is not as effective as substantiating it with a proof, but is still better than having no support. This shows that not only the presence, but also the type of supporting information affects the strength of the argument. Examining each proposition in this way, i.e. with respect to its verifiability, provides a means to determine the desirable types of support, if any, and enables the analysisof the arguments in terms of the adequacy of their support. Thus, we propose the task of classifying each proposition (the elementary unit of argumentation in this work) in an argument as UNVERIFIABLE, VERIFIABLE PUBLIC, or VERIFIABLE PRIVATE, where the appropriate type of support is reason, evidence, and optional evidence, respectively. To perform the experiments, we annotate 9,476 sentences and clauses from 1,047 comments extracted from an eRulemaking platform. In the remainder of the paper, we describe the annotation scheme and a newly created dataset (Section 2), propose a supervised learning approach to the task (Section 3), evaluate the approach (Section 4), and survey related work (Section 5). We find that Support Vector Machines (SVM) classifiers trained with n-grams and other features to capture the verifiability and experientiality exhibit statistically significant improvement over the unigram baseline, achieving a macroaveraged F 1 score of 68.99%. 2 Data We have collected and manually annotated sentences and (independent) clauses from user comments extracted from an eRulemaking website, Regulation Room 5 . Rulemaking is the process by which U.S. government agencies make new regulations and enact public policy; its digital counterpart ? eRulemaking ? moves the process to online platforms (see, e.g. (Park et al., 2012)). By providing platforms in which the public can discuss regulations that interest them, government 5 http://www.regulationroom.org agencies hope to enlist the expertise and experience of participants to create better regulations. In many rulemaking scenarios, agencies are, in fact, required to obtain feedback from the public on the proposed regulation as well as to address all substantive questions, criticisms or suggestions that are raised (Lubbers, 2006). In this way, public comments can produce changes in the final rule (Hochschild and Danielson, 1998) that, in turn, can affect millions of lives. It is crucial, therefore, for rule makers to be able to identify credible comments from those submitted. Regulation Room is an experimental website operated by Cornell eRulemaking Initiative (CeRI) 6 to promote public participation in the rulemaking process, help users write more informative comments and build collective knowledge via active discussions guided by human moderators. Regulation Room hosts actual regulations from government agencies, such as the U.S. Department of Transportation. For our research, we collected and manually annotated 9,476 propositions from 1,047 user comments from two recent rules: Airline Passenger Rights (serving peanuts on the plane, tarmac delay contingency plan, oversales of tickets, baggage fees and other airline traveller rights) and Home Mortgage Consumer Protection (loss mitigation, accounting error resolution, etc.). 2.1 Annotation Scheme To start, we collected 1,147 comments and randomly selected 100 of them to devise an annotation scheme for identifying appropriate types of support for propositions and to train annotators. Initially, we allowed the annotators to define the span for a propositions, leading to various complications and a low inter-annotator reliability. Thus, we introduced an additional step in which comments were manually sliced into propositions (or non-propositional sentences) before being given to the annotators. A proposition or sentence found this way was split further if it consisted of two or more independent clauses. The sliced comments were thencoded by two annotators into the following four disjoint classes (See Figure 1 for an overview): Verifiable Proposition [Experiential(VERIF EXP ) and Non-experiential(VERIF NON )]. A proposition is verifiable if it contains an objective asser6 http://www.lawschool.cornell.edu/ceri/ 30 Figure 1: Flow chart for annotation (It refers to the sentence (or clause) being annotated) # proposition V E R I F E X P 1 I?ve been a physician for 20 years. 2 My son has hypolycemia. 3 They flew me to NY in February. 4 The flight attendant yelled at the passengers. V E R I F N O N 5 They can have inhalation reactions. 6 since they serve them to the whole plane. 7 Peanuts do not kill people. 8 Clearly, peanuts do not kill people. 9 I believe peanuts do not kill people. 10 The governor said that he enjoyed it. 11 food allergies are rare 12 food allergies are seen in less than 20% of the population U N V E R I F 13 Again, keep it simple. 14 Banning peanuts will reduce deaths. 15 I enjoy having peanuts on the plane. 16 others are of uncertain significance 17 banning peanuts is a slippery slope N O N A R G 18 Who is in charge of this? 19 I have two comments 20 http://www.someurl.com 21 Thanks for allowing me to comment. 22 - Mike Table 1: Example Sentences. * Italics is used to illustrate core clause (Section 3.2). tion, where objective means ?expressing or dealing with facts or conditions as perceived without distortion by personal feelings, prejudices, or interpretations.? 7 Such assertions have truth values that can be proved or disproved with objective evidence 8 : Consider the examples from Table 1. propositions 1 through 7 are clearly verifiable because they only contain objective assertions. propositions 8 and 9 show that adding subjective expressions such as ?Clearly? (e.g. sentence 8) or ?I believe that? (e.g. sentence 9) to an objectively verifiable proposition (e.g. sentence 7) does not affect the verifiability of the proposition. Sentence 10 is considered verifiable because whether or not the 7 http://www.merriam-webster.com/ 8 The correctness of the assertion or the availability of the objective evidence does not matter. governor said ?he enjoyed the peanuts? can be verified with objective evidence, even though whether he really does or not cannot be verified. For the purpose of identifying an appropriate type of support, we employ a rather lenient notion of objectivity: an assertion is objectively verifiable if the domain of comparison is free of interpretation. For instance, sentence 11 is regarded as objectively verifiable, because it is clear, i.e. it is not open for interpretation, that percentage of the population is the metric under comparison even though the threshold is purely subjective 9 . The rationale is that this type of proposition can be sufficiently substantiated with objective evidence (e.g. published statistics showing the percentage of people suffering from food allergies). Another way to think about it is that sentence 11 is a loose way of saying a (more obviously) verifiable sentence 12, where the commenterneglected to mention the threshold. This is fundamentally different from propositions 13 through 16 for which objective evidence cannot exist 10 . A verifiable proposition can further be distinguished as experiential or not, depending on whether the proposition is about the writer?s personal state or experience (VERIF EXP ) or something non-experiential (VERIF NON ). This difference determines whether objective evidence is mandatory or optional with respect to the credibility of the comment. Evidence is optional when the evidence contains private information or is practically impossible to be provided: While propositions 1 through 3 can be proved with pictures of official documents, for instance, the commenters may not want to provide them for privacy reasons. Also, the website interface may not al9 One may think anything less frequent than the average is rare and another may have more stricter notion. 10 Objective evidence may exist for propositions that provide reasons for propositions 13 through 16. 31 Regulation VERIF NON VERIF EXP UNVERIF Subtotal NONARG Total # of Comments APR 1106 851 4413 6370 522 6892 820 HMCP 251 416 1733 2400 186 2586 227 Total 1357 1267 6146 8770 708 9476 1047 Table 2: Class Distribution Over Sentences and Clauses low pictures to be uploaded in comment section, which is the case with most websites. sentence 4 is practically impossible to prove unless the commenter happened to have recorded the conversation, and the website interface allows multimedia files to be uploaded. This is different from propositions 5 through 12, which should be (if valid, that is) based on non-experiential knowledge the commenter acquired through objective evidence available to the public. In certain domains, VERIF EXP propositions? sometimes referred to as anectotal evidence? provide the novel knowledge that readers are seeking. In eRulemaking, for instance, agencies accept a wide variety of comments from the public, including accounts of personal experience with the problems or conditions the new regulation proposes to address. If these accounts are relevant and plausible, the agencies may use them, even if they include no independent substantiation. Taking it to an extreme, even if the ?experience? is fake, the ?experience? and opinions based on them are valuable to the agencies as long as the ?experience? is realistic. Unverifiable Proposition (UNVERIF). A proposition is unverifiable if it cannot be proved with objective evidence. UNVERIF propositions are typically opinions, suggestions, judgements, or assertions about what will happen in the future. (See propositions 13 through 17.) Assertions about the future are typically unverifiable, because there is no direct evidence that something will happen. A very prominent exception is a prediction based on a policy of organizations, i.e. ?The store will be open this Sunday.? where the policy serves as a direct evidence. Non-Argumentative (NONARG). A sentence or clause is in this category if it is not a proposition, i.e. it cannot be verified with objective evidence and no supporting reason is required for the purpose of improving the comment quality. Examples include question, greeting, citation, and URL. (See sentences 18 through 21.) 2.2 Annotation Results The resulting distribution of classes is shown inTable 2. Note that even though we employed a rather lenient definition of objective propositions, the distribution is highly skewed towards UNVERIF propositions. This is expected because the comments are written by people who want to express their opinions about a regulation. Also, NONARG sentences comprise about 7% of the data, suggesting that most comment propositions need to be supported with a reason or evidence for maximal credibility. The inter-coder reliability checked on 30% of the data is moderate, yielding an Unweighted Cohen?s ? of 0.73. Most of the disagreement occurred in propositions like ?Airlines have to provide compensation for both fees and lost bags? in which it is not clear from the context whether it is an opinion (UNVERIF) or a law (VERIF NON ). Also, opinions that may be verifiable (e.g. ?The problems with passenger experience are not dependant on aircraft size!?) seem to cause disagreement among annotators. 3 Proposition Type Classification 3.1 Learning Algorithm To classify each proposition in an argument as VERIF NON , VERIF EXP , or UNVERIF, we train multiclass Support Vector Machines (SVM) as formulated by Crammer and Singer (2002), and later extended by Keerthi et al.(2008). We use the LibLinear (Fan et al., 2008) implementation. We experimented with other multiclass SVM approaches such as 1-vs-all and 1-vs-1 (all-vs-all), but the differences were statistically insignificant, consistent with Hsu and Lin?s (2002) empirical comparison of these methods. Thus, we only report the performance of the Crammer and Singer version of Multiclass SVM. 3.2 Features The features are binary-valued, and the feature vector for each data point is normalized to have the unit length: ?Presence? features are binary features indicating whether the given feature is present in the proposition or not; ?Count? features 32 are numeric counts of the occurrence of each feature is converted to a set of three binary features each denoting 0, 1 and 2 or more occurrences. We first tried a binning method with each digit as its own interval, resulting in binary features of the form featCnt n , but the three-interval approach proved to be better empirically, and is consistent with the approach by Riloff and Shoen (1995). The features can be grouped into three categories by purpose: Verifiability-specific (VER), Experientiality-specific (EXP) and Basic Features, each designed to capture the given proposition?s verifiability, experientiality, and both, respectively. Now we discuss the features in more detail. 3.2.1 Basic Features N-gram Presence A set of binary features denote whether a given unigram or bigram occurs in the proposition. The intuition is that by examining the occurrence of words or phrases in VERIF NON , VERIF EXP , and UNVERIF propositions, the classes that have close ties to certain words and phrases can be identified. For instance, when a proposition contains the word happy, the proposition tends to be UNVERIF. From this observation, we can speculate that happy is highly associated with UNVERIF, and went, VERIF EXP . n-gram presence, rather than the raw or normalized frequency is chosen for its superior performance (O?Keefe and Koprinska, 2009). Core Clause Tag (CCT) To correctly classifypropositions with main or subordinate clauses that do not affect the verifiability of the proposition (e.g. propositions 8 through 10 in Table 1, respectively), it is necessary to distinguish features that appear in the main clause from those that appear in the subordinate clause. Thus, we employ an auxiliary feature that adds clausal information to other features by tagging them as either core or accessory clause. Let?s consider propositions 7, 9 and 10 in Table 1: In all three examples, the core clause is italicized. In single clause cases like proposition 7, the entire proposition is the core clause. However, for proposition 9, the core clause is the subordinate clause introduced by the main clause, i.e. ?I believe? should be ignored, since the verifiability of ?peanuts do not kill people? is not dependent on it. It is the opposite for proposition 10: the main clause ?The governor said? is the core clause, and the rest need not be considered. The reason is that ?said? is a speech event, and it is possible to objectively verify whether or not the governor verbally expressed his appreciation of peanuts. To realize this intuition, we use syntactic parse trees generated by the Stanford Parser (De Marneffe et al., 2006). In particular, Penn Treebank 2 Tags contain a clause-level tag SBAR denoting a ?clause introduced by a subordinating conjunction? (Marcus et al., 1993). The ?that? clause in proposition 10 spans a subtree rooted by SBAR, whose left-most child has a lexical value ?that.? Similarly, the subordinate (non-italicized) clause in proposition 9 falls in a subtree rooted by SBAR, whose only child is S. Once the main clause of a given proposition is identified, all features set off by the clause are tagged as ?core? and the rest are tagged as ?accessory.? If a speech event is present, the tags are flipped. 3.2.2 Verifiability-specific Features (VER) Parts-of-Speech (POS) Count Rayson et al. (2001) have shown that the POS distribution is distinct in imaginative vs. informative writing. We expect this feature to distinguish UNVERIF propositions from the rest. Sentiment Clue Count Wilson et al. (2005) provides a subjectivity clue lexicon, which is a list of words with sentiment strength tags, either strong or weak, along with additional information, such as the sentiment polarity, Part-of-Speech Count (POS), etc. We suspect that propositions containing more sentiment words is more likely to be UNVERIF. Speech Event Count We use the 50 most frequent Objective-speech-event text anchors crawled from the MPQA 2.0 corpus (Wilson and Wiebe, 2005) as a speech event lexicon. The speech event text anchors refer to words like ?stated? and ?wrote? that introduce written or spoken propositions attributed to a source. propositions containing speech events such as proposition 10 in Table 1 are generally VERIF NON or VERIF EXP , since whether the attributed source has indeed made the proposition he allegedly made is objectively verifiable regardless of the subjectivity of the proposition itself. Imperative Expression Count Imperatives, i.e. commands, are generally UNVERIF (e.g. ?Do the homework now!? that is, we expect there to be no objective evidence proving thatthe homework should be done right away.), unless the sentence is a law or general procedure (e.g. ?The library should allow you to check out books.? where the 33 context makes it clear that the writer is claiming that the library lends out books.) This feature denotes whether the proposition begins with a verb or contains the following: must, should, need to, have to, ought to. Emotion Expression Count These features target specific tokens ?!?, and ?...? as well as fully capitalized word tokens to capture the emotion in text. The rationale is that expression of emotion is likely to be more prevalent in UNVERIF propositions. 3.2.3 Experientiality-specific Features (EXP) Tense Count propositions written in past tense are rarely VERIF NON , because even in the case that the statment is verifiable, they are likely to be the commenter?s past experience, i.e. VERIF EXP . Future tense are typically UNVERIF because propositions about what will happen in the future are often unverifiable with objective evidence, with exception being propositions like predictions based on policy of organizations, i.e. ?Fedex will deliver on Sunday.? To take advantage of these observations, three binary features capture each of three tenses: past, present, and future. Person Count First person narratives can suggest that the proposition is UNVERIF or VERIF EXP , except for rare cases like ?We, the passengers,...? in which the first person pronoun refers to a large body of individuals. This intuition is captured by having binary features for: 1st, 2nd and 3rd person. 4 Experiments 4.1 Methodology A Note on Argument Detection A natural first step in argumentation mining is to determine which portions of the given document comprise an argument. It can also be framed as a binary classification task in which each proposition in the document needs to be classified as either argumentative or not. Some authors choose to skip this step (Feng and Hirst, 2011), while others make use of various classifiers to achieve high level of accuracy, as Palau and Moens achieved over 70% accuracy on Araucaria and ECHR corpus (Reed and Moens, 2008; Palau and Moens, 2009). As we have discussed in Section 1, our setup is a bit unique in that we also consider implicit arguments, where propositions are not supported with explicit reason or evidence, as argumentative. As a result, only about 7%( NONARG TOTAL in Table 2) of our entire dataset is marked as non-argumentative, most of which consists of questions and greetings. By simply searching for specific unigrams, such as ??? and ?thank?, we achieve over 99% F 1 score in determining which propositions are part of an argument. The remaining experiments were done without non-argumentative propositions, i.e. NONARG in Table 2. Experimental Setup We first randomly selected 292 comments as held-out test set, resulting in the distribution shown in Table 4. Then, VERIF NON and VERIF EXP in the training set were oversampled so that the classes are equally distributed. During training, five fold cross-validation was done on the training set to tune the C parameter to 32. Because the micro-averaged F 1 scorecan be easily boosted on datasets with highly skewed class distribution, we optimize for the macroaveraged F 1 score. Preprocessing was kept at a minimal level: capital letters were lowercased after counting fully capitalized words, and numbers were converted to a NUM token. VERIF NON VERIF EXP UNVERIF Total Train 987 900 4459 6346 Test 370 367 1687 2424 Total 1357 1267 6146 8770 Table 4: # of propositions in Train and Test Set 4.2 Results & Analysis Table 3 shows a summary of the classification results. The best overall performance is achieved by combining all features (UNI+BI+VER+EXP), yielding 68.99% macro-averaged F 1 , where the gain over the baseline is statistically significant according to the bootstrap method with 10,000 samples (Efron and Tibshirani, 1994; BergKirkpatrick et al., 2012). Core Clause Tag (CCT) We do not report the performance of employing feature sets with Core Clause Tag (CCT) in Table 3, because the effect of CCT on each of the six sets of features is statistically insignificant. This is surprising at first, given the strong motivation for distinguishing the core clause from auxiliary clause, as addressed in the previous section: Subordinate clauses like ?I believe? should not cause the entire proposition to be classified as UNVERIF, and clauses like ?He said? should serve as a queue for VERIF NON or VERIF EXP , even if an unverifiable clause follows 34 Feature Set UNVERIF vs All VERIF NON vs All VERIF EXP vs All Average F 1 Pre. Rec. F 1 Pre. Rec. F 1 Pre. Rec. F 1 Macro Micro UNI(base) 85.24 79.43 82.23 42.57 51.89 46.77 61.10 66.76 63.80 64.27 73.31 UNI+BI 82.14 89.69* 85.75* 51.67* 37.57 43.51 73.48* 62.67 67.65* 65.63 77.64* VER 88.52* 52.10 65.60 28.41 61.35* 38.84 42.41 73.02* 53.65 52.70 56.68 EXP 82.42 4.45 8.44 20.92 76.49* 32.85 31.02 82.83* 45.14 28.81 27.31 VER+EXP 89.40* 49.50 63.72 29.25 71.62* 41.54 50.00 79.56* 61.41 55.55 57.43 UNI+BI+ VER+EXP 86.86* 83.05* 84.91* 49.88* 55.14 52.37* 66.67* 73.02* 69.70* 68.99* 77.27* Table 3: Three class classification results in % (Crammer & Singer?s Multiclass SVMs) Precision, recall, and F 1 scores are computed with respect to each one-vs-all classification problem for evaluation purposes, though a single machine is built for the multi-class classification problem, instead of 3 one-vs-all classifiers. The star (*) indicates that the given result is statistically significantly better than the unigram baseline. Fts UNI UNI CCT U N V E R I F + should, whatever, responsibility should C , should A , understand C previous, solve, florida, exposed, reacted, reply, kinds exposed C , solve C , NUM C , florida C , reacted C , pool C , owed C V E R I F N O N + impacted, NUM, solve, cars, pull, kinds, congress impacted C , solve C , cars C , NUM C , pool C , writing C , death C , link C should, seems, comments should C , comments C V E R I F E X P + owed, consumed, saw, expert, interesting, him, reacted, refinance owed C, consumed C , expert C , reacted C , happened C , interesting C impacted, wo impacted C , wo C , concern C , died C Table 5: Most Informative Features for UNI and UNI CCT 10 Unigrams with the largest weight (magnitude) with respect to each class ( + : positive weight / - : negative weight). it. Our conjecture turned out to be wrong, mainly because such distinction can be made for only a small subset of the data: For instance, over 83% of the unigrams are tagged as core in the UNI feature set. Thus, most of the important features for feature sets with CCT end up being features with core tag, and the important features for feature sets with and without CCT are practically the same, as shown in Table 5, resulting in statistically insignificant performance differences. Informative Features The most informative feaFeature Set UNI+BI+VER+EXP UNVERIF + should,StrSentClue >2 , VB >2 StrSentClue 0 , VBD >2 , air, since, no one, allergic, not an VERIF NON + die, death, reaction, person, allergen, airborne, no one, allergies PER 1st , should VERIF EXP + VBD >2 , PER 1st , i have, his, he, him, time ! VBZ >2 , PER 2nd Table 6: Most Informative Features for UNI+BI+VER+EXP 10 Features with the largest weight (magnitude) with respect to each class ( + : positive weight / - : negative weight). tures reported in Table 6 exhibit interesting differences among the three classes: Sentiment bearing words, i.e. ?should? and strong sentiment clues, are good indicators of UNVERIF, whereas person and tense information is crucial for VERIF EXP . As expected, the strong indicators of UNVERIF and VERIF EXP , namely ?should? and PER 1st are negatively associated with VERIF NON . It is intriguing to see that the heavily weighted features of VERIF NON are non-verb content words, unlike those of the other classes. One explanation for this is that VERIF NON are rarely indicated by specific cues; instead, a good sign of VERIF NON is the absences of cues for the other classes, which are often function words and verbs. What is remaining, then, are non-verb content words. Also, certain content words seem to be more likely to bring about factual discussions. For instance, technical terms like?allergen? and ?airborne,? appear in verifiable non-experiential propositions as ?The FDA requires labeling for the following 8 allergens.? Non-n-gram Features Table 3 clearly shows that the three non-n-gram features, VER, EXP, and VER+EXP, do not perform as well as the n-gram features. But still, the performance is impressive, given the drastic difference in the dimensionality of the features: Even the combined feature set, VER+EXP, consists of only about 100 features, when there are over 8,000 unigrams and close to 70,000 bigrams. In other words, the non-n-gram features are effectively capturing characteristics of each class. This is very promising, since this shows that a better understanding of the types of proposition can potentially lead to a more concise set of features with equal, or even better, performance. Also notice thatVER outperforms EXP for the most part, even with respect to VERIF NON vs All and VERIF EXP vs All, except for recall. This is in35 triguing, because VER are mostly from subjectivity detection domain, intended to capture the subjectivity of words in the propositions leveraging on pre-built lexia. Simply considering subjectivity of words should provide no means of distinguishing VERIF NON from VERIF EXP . One of the reasons for VER?s superior performance over EXP is that EXP by itself is inadequate for the classification task: EXP consists of only 6 (or 12 with CCT) features denoting the person and tense information. Another reason is that VER, in a limited fashion, does encode experientiality: For instance, past tense propositions can be identified with the existence of VBD(verb, past tense) and VBN(verb, past participle). 5 Related Work Argumentation Mining The primary goal of argumentation mining has been to identify and extract argumentative structures present in documents, which are often written by professionals (Moens et al., 2007; Wyner et al., 2010; Feng and Hirst, 2011; Ashley and Walker, 2013). In certain cases, the specific document structure allows additional means of identify arguments (Mochales and Moens, 2008). Even the work on online text data, which are less rigid in structure and often contain insufficiently supported propositions, focus on the extraction of arguments (Villalba and Saint-Dizier, 2012; Cabrio and Villata, 2012). We, however, are interested in the assessment of the argumentative structure, potentially providing recommendations to readers and feedback to the writers. Thus it is crucial that we also process unsubstantiated propositions, which we consider as implicit arguments. Our approach should be valuable for processing documents like online user comment where arguments may not have adequate support and an automatic means of analysis can be useful. Subjectivity Detection Work to distinguish subjective from objective propositions (e.g.(Wiebe and Riloff, 2005)), often a subtask for sentiment analysis (Pang and Lee, 2008), is relevant to our work since we are concerned with the objective verifiability of propositions. In particular, previous work attempts to detect certain types of subjective proposition: Conrad et al. (2012) identify arguing subjectivity propositions and tag them with argument labels in order to cluster argument paraphrases. Others incorporate this task as a component for solving related problems, such as answering opinion-based questions and determining the writer?s political stance (Somasundaran et al., 2007; Somasundaran and Wiebe, 2010). Similarly, Rosenthal and McKeown (2012) identify opinionated propositions expressing beliefs, leveraging from previous work in sentiment analysis and belief tagging. While the class of subjective propositions in subjectivity detection strictly contains UNVERIF propositions, it also partially overlaps with the VERIF EXP and VERIF NON classes of our work: We want to identify verifiable assertions within propositions, rather than determine the subjectivity of the proposition as a whole (e.g. proposition 8 in Table 1 is classified as a VERIF NON , though ?Clearly? is subjective.). We also distinguish two types of verifiable propositions, which is necessary for the purpose of identifying appropriate types of support. 6 Conclusions and Future Work We have proposed a novel task of automatically classifying eachproposition as UNVERIFIABLE, VERIFIABLE NONEXPERIENTIAL, or VERIFIABLE EXPERIENTIAL, where the appropriate type of support is reason, evidence, and optional evidence, respectively. This classification, once the existing support relations among propositions are identified, can provide an estimate of how well the arguments are supported. We find that Support Vector Machines (SVM) classifiers trained with n-grams and other features to capture the verifiability and experientiality exhibit statistically significant improvement over the unigram baseline, achieving a macro-averaged F 1 score of 68.99%. In the process, we have built a gold-standard dataset of 9,476 propositions from 1,047 comments submitted to an eRulemaking platform. One immediate avenue for future work is to incorporate the identification of relations among the propositions in an argument to the system to analyze the adequacy of the supporting information in the argument. This, in turn, can be used to recommend comments to readers and provide feedback to writers so that they can construct better arguments. Acknowledgments This work was supported in part by NSF grants IIS-1111176 and IIS?1314778. We thank our annotators, Pamela Ijeoma Amaechi and Simon Boehme, as well as the Cornell NLP Group and the reviewers for helpful comments. 36'")])
INFO:tensorflow:Finished getting dataset.
I0712 13:23:39.051833 140343662851904 input_pipeline.py:91] Finished getting dataset.
I0712 13:23:39.052034 140343662851904 input_pipeline.py:94] Using char-level/byte dataset..
I0712 13:23:39.187418 140343662851904 train.py:106] Vocab Size: 257
I0712 13:23:54.228018 140343662851904 checkpoints.py:242] Found no checkpoint directory at trained_models/matching/linformer
I0712 13:23:54.916134 140343662851904 train_utils.py:370] Starting training
I0712 13:23:54.916397 140343662851904 train_utils.py:371] ====================
I0712 13:24:24.166508 140343662851904 train_utils.py:377] train in step: 0
I0712 13:24:24.198369 140343662851904 train_utils.py:377] train in step: 1
I0712 13:24:24.223022 140343662851904 train_utils.py:377] train in step: 2
I0712 13:24:24.245773 140343662851904 train_utils.py:377] train in step: 3
I0712 13:24:24.268113 140343662851904 train_utils.py:377] train in step: 4
I0712 13:24:24.297052 140343662851904 train_utils.py:377] train in step: 5
I0712 13:24:24.329501 140343662851904 train_utils.py:377] train in step: 6
I0712 13:24:24.360646 140343662851904 train_utils.py:377] train in step: 7
I0712 13:24:24.393681 140343662851904 train_utils.py:377] train in step: 8
I0712 13:24:24.426957 140343662851904 train_utils.py:377] train in step: 9
I0712 13:24:24.456723 140343662851904 train_utils.py:377] train in step: 10
I0712 13:24:24.487835 140343662851904 train_utils.py:377] train in step: 11
I0712 13:24:24.519898 140343662851904 train_utils.py:377] train in step: 12
I0712 13:24:24.551153 140343662851904 train_utils.py:377] train in step: 13
I0712 13:24:24.580996 140343662851904 train_utils.py:377] train in step: 14
I0712 13:24:24.611751 140343662851904 train_utils.py:377] train in step: 15
I0712 13:24:24.640682 140343662851904 train_utils.py:377] train in step: 16
I0712 13:24:24.670987 140343662851904 train_utils.py:377] train in step: 17
I0712 13:24:24.701096 140343662851904 train_utils.py:377] train in step: 18
I0712 13:24:24.731385 140343662851904 train_utils.py:377] train in step: 19
I0712 13:24:24.773556 140343662851904 train_utils.py:377] train in step: 20
I0712 13:24:24.803320 140343662851904 train_utils.py:377] train in step: 21
I0712 13:24:24.834221 140343662851904 train_utils.py:377] train in step: 22
I0712 13:24:24.869893 140343662851904 train_utils.py:377] train in step: 23
I0712 13:24:24.904814 140343662851904 train_utils.py:377] train in step: 24
I0712 13:24:24.935226 140343662851904 train_utils.py:377] train in step: 25
I0712 13:24:24.965711 140343662851904 train_utils.py:377] train in step: 26
I0712 13:24:24.996490 140343662851904 train_utils.py:377] train in step: 27
I0712 13:24:25.027467 140343662851904 train_utils.py:377] train in step: 28
I0712 13:24:25.058653 140343662851904 train_utils.py:377] train in step: 29
I0712 13:24:25.089329 140343662851904 train_utils.py:377] train in step: 30
I0712 13:24:25.120108 140343662851904 train_utils.py:377] train in step: 31
I0712 13:24:25.151177 140343662851904 train_utils.py:377] train in step: 32
I0712 13:24:25.183170 140343662851904 train_utils.py:377] train in step: 33
I0712 13:24:25.214376 140343662851904 train_utils.py:377] train in step: 34
I0712 13:24:25.245429 140343662851904 train_utils.py:377] train in step: 35
I0712 13:24:25.276327 140343662851904 train_utils.py:377] train in step: 36
I0712 13:24:25.310310 140343662851904 train_utils.py:377] train in step: 37
I0712 13:24:25.338977 140343662851904 train_utils.py:377] train in step: 38
I0712 13:24:25.371124 140343662851904 train_utils.py:377] train in step: 39
I0712 13:24:25.402086 140343662851904 train_utils.py:377] train in step: 40
I0712 13:24:25.433528 140343662851904 train_utils.py:377] train in step: 41
I0712 13:24:25.465791 140343662851904 train_utils.py:377] train in step: 42
I0712 13:24:25.497223 140343662851904 train_utils.py:377] train in step: 43
I0712 13:24:25.531925 140343662851904 train_utils.py:377] train in step: 44
I0712 13:24:25.561062 140343662851904 train_utils.py:377] train in step: 45
I0712 13:24:25.593056 140343662851904 train_utils.py:377] train in step: 46
I0712 13:24:25.624441 140343662851904 train_utils.py:377] train in step: 47
I0712 13:24:25.655673 140343662851904 train_utils.py:377] train in step: 48
I0712 13:24:25.689619 140343662851904 train_utils.py:377] train in step: 49
I0712 13:24:25.721462 140343662851904 train_utils.py:377] train in step: 50
I0712 13:24:25.753022 140343662851904 train_utils.py:377] train in step: 51
I0712 13:24:25.785424 140343662851904 train_utils.py:377] train in step: 52
I0712 13:24:25.816984 140343662851904 train_utils.py:377] train in step: 53
I0712 13:24:25.851224 140343662851904 train_utils.py:377] train in step: 54
I0712 13:24:25.883086 140343662851904 train_utils.py:377] train in step: 55
I0712 13:24:25.914893 140343662851904 train_utils.py:377] train in step: 56
I0712 13:24:25.948897 140343662851904 train_utils.py:377] train in step: 57
I0712 13:24:25.979637 140343662851904 train_utils.py:377] train in step: 58
I0712 13:24:26.015605 140343662851904 train_utils.py:377] train in step: 59
I0712 13:24:26.044470 140343662851904 train_utils.py:377] train in step: 60
I0712 13:24:26.075718 140343662851904 train_utils.py:377] train in step: 61
I0712 13:24:26.110988 140343662851904 train_utils.py:377] train in step: 62
I0712 13:24:26.145548 140343662851904 train_utils.py:377] train in step: 63
I0712 13:24:26.175259 140343662851904 train_utils.py:377] train in step: 64
I0712 13:24:26.210445 140343662851904 train_utils.py:377] train in step: 65
I0712 13:24:26.242110 140343662851904 train_utils.py:377] train in step: 66
I0712 13:24:26.273829 140343662851904 train_utils.py:377] train in step: 67
I0712 13:24:26.305340 140343662851904 train_utils.py:377] train in step: 68
I0712 13:24:26.337705 140343662851904 train_utils.py:377] train in step: 69
I0712 13:24:26.370495 140343662851904 train_utils.py:377] train in step: 70
I0712 13:24:26.401875 140343662851904 train_utils.py:377] train in step: 71
I0712 13:24:26.433707 140343662851904 train_utils.py:377] train in step: 72
I0712 13:24:26.465830 140343662851904 train_utils.py:377] train in step: 73
I0712 13:24:26.497183 140343662851904 train_utils.py:377] train in step: 74
I0712 13:24:26.533239 140343662851904 train_utils.py:377] train in step: 75
I0712 13:24:26.562724 140343662851904 train_utils.py:377] train in step: 76
I0712 13:24:26.594706 140343662851904 train_utils.py:377] train in step: 77
I0712 13:24:26.627571 140343662851904 train_utils.py:377] train in step: 78
I0712 13:24:26.658968 140343662851904 train_utils.py:377] train in step: 79
I0712 13:24:26.690703 140343662851904 train_utils.py:377] train in step: 80
I0712 13:24:26.722871 140343662851904 train_utils.py:377] train in step: 81
I0712 13:24:26.755839 140343662851904 train_utils.py:377] train in step: 82
I0712 13:24:26.786849 140343662851904 train_utils.py:377] train in step: 83
I0712 13:24:26.819363 140343662851904 train_utils.py:377] train in step: 84
I0712 13:24:26.851218 140343662851904 train_utils.py:377] train in step: 85
I0712 13:24:26.884464 140343662851904 train_utils.py:377] train in step: 86
I0712 13:24:26.915402 140343662851904 train_utils.py:377] train in step: 87
I0712 13:24:26.947665 140343662851904 train_utils.py:377] train in step: 88
I0712 13:24:26.978975 140343662851904 train_utils.py:377] train in step: 89
I0712 13:24:27.011727 140343662851904 train_utils.py:377] train in step: 90
I0712 13:24:27.046272 140343662851904 train_utils.py:377] train in step: 91
I0712 13:24:27.075380 140343662851904 train_utils.py:377] train in step: 92
I0712 13:24:27.107581 140343662851904 train_utils.py:377] train in step: 93
I0712 13:24:27.140037 140343662851904 train_utils.py:377] train in step: 94
I0712 13:24:27.172103 140343662851904 train_utils.py:377] train in step: 95
I0712 13:24:27.205712 140343662851904 train_utils.py:377] train in step: 96
I0712 13:24:27.236402 140343662851904 train_utils.py:377] train in step: 97
I0712 13:24:27.268970 140343662851904 train_utils.py:377] train in step: 98
I0712 13:24:27.300406 140343662851904 train_utils.py:377] train in step: 99
I0712 13:24:27.333757 140343662851904 train_utils.py:377] train in step: 100
I0712 13:24:27.366250 140343662851904 train_utils.py:377] train in step: 101
I0712 13:24:27.397655 140343662851904 train_utils.py:377] train in step: 102
I0712 13:24:27.429651 140343662851904 train_utils.py:377] train in step: 103
I0712 13:24:27.461700 140343662851904 train_utils.py:377] train in step: 104
I0712 13:24:27.493349 140343662851904 train_utils.py:377] train in step: 105
I0712 13:24:27.526612 140343662851904 train_utils.py:377] train in step: 106
I0712 13:24:27.557827 140343662851904 train_utils.py:377] train in step: 107
I0712 13:24:27.590329 140343662851904 train_utils.py:377] train in step: 108
I0712 13:24:27.622111 140343662851904 train_utils.py:377] train in step: 109
I0712 13:24:27.654050 140343662851904 train_utils.py:377] train in step: 110
I0712 13:24:27.686012 140343662851904 train_utils.py:377] train in step: 111
I0712 13:24:27.718253 140343662851904 train_utils.py:377] train in step: 112
I0712 13:24:27.749143 140343662851904 train_utils.py:377] train in step: 113
I0712 13:24:27.781016 140343662851904 train_utils.py:377] train in step: 114
I0712 13:24:27.813822 140343662851904 train_utils.py:377] train in step: 115
I0712 13:24:27.845795 140343662851904 train_utils.py:377] train in step: 116
I0712 13:24:27.878106 140343662851904 train_utils.py:377] train in step: 117
I0712 13:24:27.910298 140343662851904 train_utils.py:377] train in step: 118
I0712 13:24:27.942419 140343662851904 train_utils.py:377] train in step: 119
I0712 13:24:27.973619 140343662851904 train_utils.py:377] train in step: 120
I0712 13:24:28.006293 140343662851904 train_utils.py:377] train in step: 121
I0712 13:24:28.038285 140343662851904 train_utils.py:377] train in step: 122
I0712 13:24:28.072126 140343662851904 train_utils.py:377] train in step: 123
I0712 13:24:28.104146 140343662851904 train_utils.py:377] train in step: 124
I0712 13:24:28.136327 140343662851904 train_utils.py:377] train in step: 125
I0712 13:24:28.168000 140343662851904 train_utils.py:377] train in step: 126
I0712 13:24:28.202622 140343662851904 train_utils.py:377] train in step: 127
I0712 13:24:28.232990 140343662851904 train_utils.py:377] train in step: 128
I0712 13:24:28.264287 140343662851904 train_utils.py:377] train in step: 129
I0712 13:24:28.296302 140343662851904 train_utils.py:377] train in step: 130
I0712 13:24:28.328805 140343662851904 train_utils.py:377] train in step: 131
I0712 13:24:28.359872 140343662851904 train_utils.py:377] train in step: 132
I0712 13:24:28.391962 140343662851904 train_utils.py:377] train in step: 133
I0712 13:24:28.423906 140343662851904 train_utils.py:377] train in step: 134
I0712 13:24:28.456238 140343662851904 train_utils.py:377] train in step: 135
I0712 13:24:28.488981 140343662851904 train_utils.py:377] train in step: 136
I0712 13:24:28.520709 140343662851904 train_utils.py:377] train in step: 137
I0712 13:24:28.552309 140343662851904 train_utils.py:377] train in step: 138
I0712 13:24:28.584422 140343662851904 train_utils.py:377] train in step: 139
I0712 13:24:28.616391 140343662851904 train_utils.py:377] train in step: 140
I0712 13:24:28.649774 140343662851904 train_utils.py:377] train in step: 141
I0712 13:24:28.680124 140343662851904 train_utils.py:377] train in step: 142
I0712 13:24:28.713737 140343662851904 train_utils.py:377] train in step: 143
I0712 13:24:28.747105 140343662851904 train_utils.py:377] train in step: 144
I0712 13:24:28.777699 140343662851904 train_utils.py:377] train in step: 145
I0712 13:24:28.810700 140343662851904 train_utils.py:377] train in step: 146
I0712 13:24:28.841959 140343662851904 train_utils.py:377] train in step: 147
I0712 13:24:28.873849 140343662851904 train_utils.py:377] train in step: 148
I0712 13:24:28.905679 140343662851904 train_utils.py:377] train in step: 149
I0712 13:24:28.940219 140343662851904 train_utils.py:377] train in step: 150
I0712 13:24:28.969363 140343662851904 train_utils.py:377] train in step: 151
I0712 13:24:29.001744 140343662851904 train_utils.py:377] train in step: 152
I0712 13:24:29.034810 140343662851904 train_utils.py:377] train in step: 153
I0712 13:24:29.065697 140343662851904 train_utils.py:377] train in step: 154
I0712 13:24:29.097969 140343662851904 train_utils.py:377] train in step: 155
I0712 13:24:29.130002 140343662851904 train_utils.py:377] train in step: 156
I0712 13:24:29.161747 140343662851904 train_utils.py:377] train in step: 157
I0712 13:24:29.193799 140343662851904 train_utils.py:377] train in step: 158
I0712 13:24:29.225905 140343662851904 train_utils.py:377] train in step: 159
I0712 13:24:29.258915 140343662851904 train_utils.py:377] train in step: 160
I0712 13:24:29.290309 140343662851904 train_utils.py:377] train in step: 161
I0712 13:24:29.322463 140343662851904 train_utils.py:377] train in step: 162
I0712 13:24:29.358574 140343662851904 train_utils.py:377] train in step: 163
I0712 13:24:29.391456 140343662851904 train_utils.py:377] train in step: 164
I0712 13:24:29.423945 140343662851904 train_utils.py:377] train in step: 165
I0712 13:24:29.455399 140343662851904 train_utils.py:377] train in step: 166
I0712 13:24:29.490816 140343662851904 train_utils.py:377] train in step: 167
I0712 13:24:29.521455 140343662851904 train_utils.py:377] train in step: 168
I0712 13:24:29.552078 140343662851904 train_utils.py:377] train in step: 169
I0712 13:24:29.584328 140343662851904 train_utils.py:377] train in step: 170
I0712 13:24:29.618268 140343662851904 train_utils.py:377] train in step: 171
I0712 13:24:29.650929 140343662851904 train_utils.py:377] train in step: 172
I0712 13:24:29.682281 140343662851904 train_utils.py:377] train in step: 173
I0712 13:24:29.714024 140343662851904 train_utils.py:377] train in step: 174
I0712 13:24:29.746626 140343662851904 train_utils.py:377] train in step: 175
I0712 13:24:29.779529 140343662851904 train_utils.py:377] train in step: 176
I0712 13:24:29.812968 140343662851904 train_utils.py:377] train in step: 177
I0712 13:24:29.843241 140343662851904 train_utils.py:377] train in step: 178
I0712 13:24:29.875216 140343662851904 train_utils.py:377] train in step: 179
I0712 13:24:29.908003 140343662851904 train_utils.py:377] train in step: 180
I0712 13:24:29.939646 140343662851904 train_utils.py:377] train in step: 181
I0712 13:24:29.973539 140343662851904 train_utils.py:377] train in step: 182
I0712 13:24:30.005690 140343662851904 train_utils.py:377] train in step: 183
I0712 13:24:30.039384 140343662851904 train_utils.py:377] train in step: 184
I0712 13:24:30.072812 140343662851904 train_utils.py:377] train in step: 185
I0712 13:24:30.106617 140343662851904 train_utils.py:377] train in step: 186
I0712 13:24:30.138419 140343662851904 train_utils.py:377] train in step: 187
I0712 13:24:30.170523 140343662851904 train_utils.py:377] train in step: 188
I0712 13:24:30.201722 140343662851904 train_utils.py:377] train in step: 189
I0712 13:24:30.234330 140343662851904 train_utils.py:377] train in step: 190
I0712 13:24:30.265698 140343662851904 train_utils.py:377] train in step: 191
I0712 13:24:30.298342 140343662851904 train_utils.py:377] train in step: 192
I0712 13:24:30.330018 140343662851904 train_utils.py:377] train in step: 193
I0712 13:24:30.361968 140343662851904 train_utils.py:377] train in step: 194
I0712 13:24:30.393852 140343662851904 train_utils.py:377] train in step: 195
I0712 13:24:30.426680 140343662851904 train_utils.py:377] train in step: 196
I0712 13:24:30.458078 140343662851904 train_utils.py:377] train in step: 197
I0712 13:24:30.489922 140343662851904 train_utils.py:377] train in step: 198
I0712 13:24:30.523884 140343662851904 train_utils.py:377] train in step: 199
I0712 13:24:30.556268 140343662851904 train_utils.py:377] train in step: 200
I0712 13:24:31.264651 140343662851904 train_utils.py:396] train in step: 200, loss: 0.7250999808311462, acc: 0.5187000036239624
I0712 13:24:39.425330 140343662851904 train_utils.py:411] eval in step: 200, loss: 0.6948, acc: 0.5100
I0712 13:24:39.429570 140343662851904 train_utils.py:421] Testing...
I0712 13:24:42.713612 140343662851904 train_utils.py:424] test in step: 200, loss: 0.7161, acc: 0.4600
I0712 13:24:42.742256 140343662851904 train_utils.py:377] train in step: 201
I0712 13:24:42.765965 140343662851904 train_utils.py:377] train in step: 202
I0712 13:24:42.788598 140343662851904 train_utils.py:377] train in step: 203
I0712 13:24:42.816750 140343662851904 train_utils.py:377] train in step: 204
I0712 13:24:42.839326 140343662851904 train_utils.py:377] train in step: 205
I0712 13:24:42.869561 140343662851904 train_utils.py:377] train in step: 206
I0712 13:24:42.903973 140343662851904 train_utils.py:377] train in step: 207
I0712 13:24:42.949353 140343662851904 train_utils.py:377] train in step: 208
I0712 13:24:42.979086 140343662851904 train_utils.py:377] train in step: 209
I0712 13:24:43.011119 140343662851904 train_utils.py:377] train in step: 210
I0712 13:24:43.054048 140343662851904 train_utils.py:377] train in step: 211
I0712 13:24:43.083739 140343662851904 train_utils.py:377] train in step: 212
I0712 13:24:43.115863 140343662851904 train_utils.py:377] train in step: 213
I0712 13:24:43.147486 140343662851904 train_utils.py:377] train in step: 214
I0712 13:24:43.179618 140343662851904 train_utils.py:377] train in step: 215
I0712 13:24:43.215672 140343662851904 train_utils.py:377] train in step: 216
I0712 13:24:43.248372 140343662851904 train_utils.py:377] train in step: 217
I0712 13:24:43.278665 140343662851904 train_utils.py:377] train in step: 218
I0712 13:24:43.311068 140343662851904 train_utils.py:377] train in step: 219
I0712 13:24:43.342570 140343662851904 train_utils.py:377] train in step: 220
I0712 13:24:43.376420 140343662851904 train_utils.py:377] train in step: 221
I0712 13:24:43.409079 140343662851904 train_utils.py:377] train in step: 222
I0712 13:24:43.439996 140343662851904 train_utils.py:377] train in step: 223
I0712 13:24:43.474428 140343662851904 train_utils.py:377] train in step: 224
I0712 13:24:43.504154 140343662851904 train_utils.py:377] train in step: 225
I0712 13:24:43.536536 140343662851904 train_utils.py:377] train in step: 226
I0712 13:24:43.572480 140343662851904 train_utils.py:377] train in step: 227
I0712 13:24:43.602993 140343662851904 train_utils.py:377] train in step: 228
I0712 13:24:43.635700 140343662851904 train_utils.py:377] train in step: 229
I0712 13:24:43.667070 140343662851904 train_utils.py:377] train in step: 230
I0712 13:24:43.699360 140343662851904 train_utils.py:377] train in step: 231
I0712 13:24:43.733016 140343662851904 train_utils.py:377] train in step: 232
I0712 13:24:43.764869 140343662851904 train_utils.py:377] train in step: 233
I0712 13:24:43.797944 140343662851904 train_utils.py:377] train in step: 234
I0712 13:24:43.828939 140343662851904 train_utils.py:377] train in step: 235
I0712 13:24:43.860865 140343662851904 train_utils.py:377] train in step: 236
I0712 13:24:43.893095 140343662851904 train_utils.py:377] train in step: 237
I0712 13:24:43.925124 140343662851904 train_utils.py:377] train in step: 238
I0712 13:24:43.960083 140343662851904 train_utils.py:377] train in step: 239
I0712 13:24:43.994272 140343662851904 train_utils.py:377] train in step: 240
I0712 13:24:44.025678 140343662851904 train_utils.py:377] train in step: 241
I0712 13:24:44.070248 140343662851904 train_utils.py:377] train in step: 242
I0712 13:24:44.102817 140343662851904 train_utils.py:377] train in step: 243
I0712 13:24:44.138450 140343662851904 train_utils.py:377] train in step: 244
I0712 13:24:44.176752 140343662851904 train_utils.py:377] train in step: 245
I0712 13:24:44.209554 140343662851904 train_utils.py:377] train in step: 246
I0712 13:24:44.240391 140343662851904 train_utils.py:377] train in step: 247
I0712 13:24:44.272474 140343662851904 train_utils.py:377] train in step: 248
I0712 13:24:44.304066 140343662851904 train_utils.py:377] train in step: 249
I0712 13:24:44.344253 140343662851904 train_utils.py:377] train in step: 250
I0712 13:24:44.377070 140343662851904 train_utils.py:377] train in step: 251
I0712 13:24:44.410151 140343662851904 train_utils.py:377] train in step: 252
I0712 13:24:44.440749 140343662851904 train_utils.py:377] train in step: 253
I0712 13:24:44.472433 140343662851904 train_utils.py:377] train in step: 254
I0712 13:24:44.504326 140343662851904 train_utils.py:377] train in step: 255
I0712 13:24:44.540078 140343662851904 train_utils.py:377] train in step: 256
I0712 13:24:44.569933 140343662851904 train_utils.py:377] train in step: 257
I0712 13:24:44.602371 140343662851904 train_utils.py:377] train in step: 258
I0712 13:24:44.633732 140343662851904 train_utils.py:377] train in step: 259
I0712 13:24:44.666304 140343662851904 train_utils.py:377] train in step: 260
I0712 13:24:44.698786 140343662851904 train_utils.py:377] train in step: 261
I0712 13:24:44.730079 140343662851904 train_utils.py:377] train in step: 262
I0712 13:24:44.763300 140343662851904 train_utils.py:377] train in step: 263
I0712 13:24:44.799458 140343662851904 train_utils.py:377] train in step: 264
I0712 13:24:44.831698 140343662851904 train_utils.py:377] train in step: 265
I0712 13:24:44.864405 140343662851904 train_utils.py:377] train in step: 266
I0712 13:24:44.895651 140343662851904 train_utils.py:377] train in step: 267
I0712 13:24:44.928467 140343662851904 train_utils.py:377] train in step: 268
I0712 13:24:44.961428 140343662851904 train_utils.py:377] train in step: 269
I0712 13:24:44.996009 140343662851904 train_utils.py:377] train in step: 270
I0712 13:24:45.025523 140343662851904 train_utils.py:377] train in step: 271
I0712 13:24:45.057756 140343662851904 train_utils.py:377] train in step: 272
I0712 13:24:45.089306 140343662851904 train_utils.py:377] train in step: 273
I0712 13:24:45.122613 140343662851904 train_utils.py:377] train in step: 274
I0712 13:24:45.153918 140343662851904 train_utils.py:377] train in step: 275
I0712 13:24:45.185901 140343662851904 train_utils.py:377] train in step: 276
I0712 13:24:45.217852 140343662851904 train_utils.py:377] train in step: 277
I0712 13:24:45.250437 140343662851904 train_utils.py:377] train in step: 278
I0712 13:24:45.282645 140343662851904 train_utils.py:377] train in step: 279
I0712 13:24:45.315288 140343662851904 train_utils.py:377] train in step: 280
I0712 13:24:45.346573 140343662851904 train_utils.py:377] train in step: 281
I0712 13:24:45.378992 140343662851904 train_utils.py:377] train in step: 282
I0712 13:24:45.410710 140343662851904 train_utils.py:377] train in step: 283
I0712 13:24:45.450256 140343662851904 train_utils.py:377] train in step: 284
I0712 13:24:45.483952 140343662851904 train_utils.py:377] train in step: 285
I0712 13:24:45.520224 140343662851904 train_utils.py:377] train in step: 286
I0712 13:24:45.553021 140343662851904 train_utils.py:377] train in step: 287
I0712 13:24:45.586927 140343662851904 train_utils.py:377] train in step: 288
I0712 13:24:45.618172 140343662851904 train_utils.py:377] train in step: 289
I0712 13:24:45.657014 140343662851904 train_utils.py:377] train in step: 290
I0712 13:24:45.688302 140343662851904 train_utils.py:377] train in step: 291
I0712 13:24:45.720391 140343662851904 train_utils.py:377] train in step: 292
I0712 13:24:45.751637 140343662851904 train_utils.py:377] train in step: 293
I0712 13:24:45.784363 140343662851904 train_utils.py:377] train in step: 294
I0712 13:24:45.815636 140343662851904 train_utils.py:377] train in step: 295
I0712 13:24:45.848453 140343662851904 train_utils.py:377] train in step: 296
I0712 13:24:45.878931 140343662851904 train_utils.py:377] train in step: 297
I0712 13:24:45.912262 140343662851904 train_utils.py:377] train in step: 298
I0712 13:24:45.943219 140343662851904 train_utils.py:377] train in step: 299
I0712 13:24:45.975131 140343662851904 train_utils.py:377] train in step: 300
I0712 13:24:46.010503 140343662851904 train_utils.py:377] train in step: 301
I0712 13:24:46.040069 140343662851904 train_utils.py:377] train in step: 302
I0712 13:24:46.072187 140343662851904 train_utils.py:377] train in step: 303
I0712 13:24:46.104564 140343662851904 train_utils.py:377] train in step: 304
I0712 13:24:46.136098 140343662851904 train_utils.py:377] train in step: 305
I0712 13:24:46.177876 140343662851904 train_utils.py:377] train in step: 306
I0712 13:24:46.211481 140343662851904 train_utils.py:377] train in step: 307
I0712 13:24:46.244184 140343662851904 train_utils.py:377] train in step: 308
I0712 13:24:46.276476 140343662851904 train_utils.py:377] train in step: 309
I0712 13:24:46.308437 140343662851904 train_utils.py:377] train in step: 310
I0712 13:24:46.339989 140343662851904 train_utils.py:377] train in step: 311
I0712 13:24:46.376440 140343662851904 train_utils.py:377] train in step: 312
I0712 13:24:46.405797 140343662851904 train_utils.py:377] train in step: 313
I0712 13:24:46.438238 140343662851904 train_utils.py:377] train in step: 314
I0712 13:24:46.470145 140343662851904 train_utils.py:377] train in step: 315
I0712 13:24:46.501995 140343662851904 train_utils.py:377] train in step: 316
I0712 13:24:46.537057 140343662851904 train_utils.py:377] train in step: 317
I0712 13:24:46.569067 140343662851904 train_utils.py:377] train in step: 318
I0712 13:24:46.599312 140343662851904 train_utils.py:377] train in step: 319
I0712 13:24:46.631303 140343662851904 train_utils.py:377] train in step: 320
I0712 13:24:46.662788 140343662851904 train_utils.py:377] train in step: 321
I0712 13:24:46.698029 140343662851904 train_utils.py:377] train in step: 322
I0712 13:24:46.731554 140343662851904 train_utils.py:377] train in step: 323
I0712 13:24:46.761484 140343662851904 train_utils.py:377] train in step: 324
I0712 13:24:46.792963 140343662851904 train_utils.py:377] train in step: 325
I0712 13:24:46.825776 140343662851904 train_utils.py:377] train in step: 326
I0712 13:24:46.861423 140343662851904 train_utils.py:377] train in step: 327
I0712 13:24:46.895478 140343662851904 train_utils.py:377] train in step: 328
I0712 13:24:46.927594 140343662851904 train_utils.py:377] train in step: 329
I0712 13:24:46.960756 140343662851904 train_utils.py:377] train in step: 330
I0712 13:24:46.999511 140343662851904 train_utils.py:377] train in step: 331
I0712 13:24:47.031010 140343662851904 train_utils.py:377] train in step: 332
I0712 13:24:47.061856 140343662851904 train_utils.py:377] train in step: 333
I0712 13:24:47.094612 140343662851904 train_utils.py:377] train in step: 334
I0712 13:24:47.126652 140343662851904 train_utils.py:377] train in step: 335
I0712 13:24:47.160601 140343662851904 train_utils.py:377] train in step: 336
I0712 13:24:47.191416 140343662851904 train_utils.py:377] train in step: 337
I0712 13:24:47.223824 140343662851904 train_utils.py:377] train in step: 338
I0712 13:24:47.257509 140343662851904 train_utils.py:377] train in step: 339
I0712 13:24:47.288636 140343662851904 train_utils.py:377] train in step: 340
I0712 13:24:47.324005 140343662851904 train_utils.py:377] train in step: 341
I0712 13:24:47.355710 140343662851904 train_utils.py:377] train in step: 342
I0712 13:24:47.387113 140343662851904 train_utils.py:377] train in step: 343
I0712 13:24:47.422374 140343662851904 train_utils.py:377] train in step: 344
I0712 13:24:47.454179 140343662851904 train_utils.py:377] train in step: 345
I0712 13:24:47.487210 140343662851904 train_utils.py:377] train in step: 346
I0712 13:24:47.518524 140343662851904 train_utils.py:377] train in step: 347
I0712 13:24:47.551143 140343662851904 train_utils.py:377] train in step: 348
I0712 13:24:47.584338 140343662851904 train_utils.py:377] train in step: 349
I0712 13:24:47.619258 140343662851904 train_utils.py:377] train in step: 350
I0712 13:24:47.650945 140343662851904 train_utils.py:377] train in step: 351
I0712 13:24:47.695002 140343662851904 train_utils.py:377] train in step: 352
I0712 13:24:47.726424 140343662851904 train_utils.py:377] train in step: 353
I0712 13:24:47.758263 140343662851904 train_utils.py:377] train in step: 354
I0712 13:24:47.790642 140343662851904 train_utils.py:377] train in step: 355
I0712 13:24:47.826871 140343662851904 train_utils.py:377] train in step: 356
I0712 13:24:47.859758 140343662851904 train_utils.py:377] train in step: 357
I0712 13:24:47.891158 140343662851904 train_utils.py:377] train in step: 358
I0712 13:24:47.927238 140343662851904 train_utils.py:377] train in step: 359
I0712 13:24:47.957918 140343662851904 train_utils.py:377] train in step: 360
I0712 13:24:47.989883 140343662851904 train_utils.py:377] train in step: 361
I0712 13:24:48.025576 140343662851904 train_utils.py:377] train in step: 362
I0712 13:24:48.056979 140343662851904 train_utils.py:377] train in step: 363
I0712 13:24:48.088532 140343662851904 train_utils.py:377] train in step: 364
I0712 13:24:48.123429 140343662851904 train_utils.py:377] train in step: 365
I0712 13:24:48.155372 140343662851904 train_utils.py:377] train in step: 366
I0712 13:24:48.190853 140343662851904 train_utils.py:377] train in step: 367
I0712 13:24:48.227890 140343662851904 train_utils.py:377] train in step: 368
I0712 13:24:48.264367 140343662851904 train_utils.py:377] train in step: 369
I0712 13:24:48.297120 140343662851904 train_utils.py:377] train in step: 370
I0712 13:24:48.329067 140343662851904 train_utils.py:377] train in step: 371
I0712 13:24:48.360503 140343662851904 train_utils.py:377] train in step: 372
I0712 13:24:48.404022 140343662851904 train_utils.py:377] train in step: 373
I0712 13:24:48.435425 140343662851904 train_utils.py:377] train in step: 374
I0712 13:24:48.469521 140343662851904 train_utils.py:377] train in step: 375
I0712 13:24:48.501523 140343662851904 train_utils.py:377] train in step: 376
I0712 13:24:48.536561 140343662851904 train_utils.py:377] train in step: 377
I0712 13:24:48.570013 140343662851904 train_utils.py:377] train in step: 378
I0712 13:24:48.601136 140343662851904 train_utils.py:377] train in step: 379
I0712 13:24:48.635669 140343662851904 train_utils.py:377] train in step: 380
I0712 13:24:48.667592 140343662851904 train_utils.py:377] train in step: 381
I0712 13:24:48.699452 140343662851904 train_utils.py:377] train in step: 382
I0712 13:24:48.732972 140343662851904 train_utils.py:377] train in step: 383
I0712 13:24:48.764436 140343662851904 train_utils.py:377] train in step: 384
I0712 13:24:48.796831 140343662851904 train_utils.py:377] train in step: 385
I0712 13:24:48.828011 140343662851904 train_utils.py:377] train in step: 386
I0712 13:24:48.860523 140343662851904 train_utils.py:377] train in step: 387
I0712 13:24:48.894141 140343662851904 train_utils.py:377] train in step: 388
I0712 13:24:48.925969 140343662851904 train_utils.py:377] train in step: 389
I0712 13:24:48.958879 140343662851904 train_utils.py:377] train in step: 390
I0712 13:24:48.991665 140343662851904 train_utils.py:377] train in step: 391
I0712 13:24:49.023623 140343662851904 train_utils.py:377] train in step: 392
I0712 13:24:49.055226 140343662851904 train_utils.py:377] train in step: 393
I0712 13:24:49.087750 140343662851904 train_utils.py:377] train in step: 394
I0712 13:24:49.119292 140343662851904 train_utils.py:377] train in step: 395
I0712 13:24:49.151947 140343662851904 train_utils.py:377] train in step: 396
I0712 13:24:49.183961 140343662851904 train_utils.py:377] train in step: 397
I0712 13:24:49.217100 140343662851904 train_utils.py:377] train in step: 398
I0712 13:24:49.248216 140343662851904 train_utils.py:377] train in step: 399
I0712 13:24:49.281858 140343662851904 train_utils.py:377] train in step: 400
I0712 13:24:49.532551 140343662851904 train_utils.py:396] train in step: 400, loss: 0.7396000027656555, acc: 0.5511999726295471
I0712 13:24:52.708232 140343662851904 train_utils.py:411] eval in step: 400, loss: 0.8452, acc: 0.5450
I0712 13:24:52.711960 140343662851904 train_utils.py:421] Testing...
I0712 13:24:55.791246 140343662851904 train_utils.py:424] test in step: 400, loss: 0.8534, acc: 0.5400
I0712 13:24:55.823674 140343662851904 train_utils.py:377] train in step: 401
I0712 13:24:55.844974 140343662851904 train_utils.py:377] train in step: 402
I0712 13:24:55.866901 140343662851904 train_utils.py:377] train in step: 403
I0712 13:24:55.887742 140343662851904 train_utils.py:377] train in step: 404
I0712 13:24:55.929813 140343662851904 train_utils.py:377] train in step: 405
I0712 13:24:55.959963 140343662851904 train_utils.py:377] train in step: 406
I0712 13:24:55.992087 140343662851904 train_utils.py:377] train in step: 407
I0712 13:24:56.024009 140343662851904 train_utils.py:377] train in step: 408
I0712 13:24:56.060250 140343662851904 train_utils.py:377] train in step: 409
I0712 13:24:56.090394 140343662851904 train_utils.py:377] train in step: 410
I0712 13:24:56.122720 140343662851904 train_utils.py:377] train in step: 411
I0712 13:24:56.156611 140343662851904 train_utils.py:377] train in step: 412
I0712 13:24:56.198279 140343662851904 train_utils.py:377] train in step: 413
I0712 13:24:56.231706 140343662851904 train_utils.py:377] train in step: 414
I0712 13:24:56.277130 140343662851904 train_utils.py:377] train in step: 415
I0712 13:24:56.308760 140343662851904 train_utils.py:377] train in step: 416
I0712 13:24:56.345483 140343662851904 train_utils.py:377] train in step: 417
I0712 13:24:56.377314 140343662851904 train_utils.py:377] train in step: 418
I0712 13:24:56.408521 140343662851904 train_utils.py:377] train in step: 419
I0712 13:24:56.441008 140343662851904 train_utils.py:377] train in step: 420
I0712 13:24:56.473675 140343662851904 train_utils.py:377] train in step: 421
I0712 13:24:56.508247 140343662851904 train_utils.py:377] train in step: 422
I0712 13:24:56.539011 140343662851904 train_utils.py:377] train in step: 423
I0712 13:24:56.570994 140343662851904 train_utils.py:377] train in step: 424
I0712 13:24:56.603757 140343662851904 train_utils.py:377] train in step: 425
I0712 13:24:56.638588 140343662851904 train_utils.py:377] train in step: 426
I0712 13:24:56.673406 140343662851904 train_utils.py:377] train in step: 427
I0712 13:24:56.703777 140343662851904 train_utils.py:377] train in step: 428
I0712 13:24:56.737722 140343662851904 train_utils.py:377] train in step: 429
I0712 13:24:56.777759 140343662851904 train_utils.py:377] train in step: 430
I0712 13:24:56.813798 140343662851904 train_utils.py:377] train in step: 431
I0712 13:24:56.848908 140343662851904 train_utils.py:377] train in step: 432
I0712 13:24:56.881357 140343662851904 train_utils.py:377] train in step: 433
I0712 13:24:56.914731 140343662851904 train_utils.py:377] train in step: 434
I0712 13:24:56.948751 140343662851904 train_utils.py:377] train in step: 435
I0712 13:24:56.980512 140343662851904 train_utils.py:377] train in step: 436
I0712 13:24:57.018876 140343662851904 train_utils.py:377] train in step: 437
I0712 13:24:57.051605 140343662851904 train_utils.py:377] train in step: 438
I0712 13:24:57.081254 140343662851904 train_utils.py:377] train in step: 439
I0712 13:24:57.114161 140343662851904 train_utils.py:377] train in step: 440
I0712 13:24:57.145179 140343662851904 train_utils.py:377] train in step: 441
I0712 13:24:57.177541 140343662851904 train_utils.py:377] train in step: 442
I0712 13:24:57.213076 140343662851904 train_utils.py:377] train in step: 443
I0712 13:24:57.244430 140343662851904 train_utils.py:377] train in step: 444
I0712 13:24:57.286357 140343662851904 train_utils.py:377] train in step: 445
I0712 13:24:57.317289 140343662851904 train_utils.py:377] train in step: 446
I0712 13:24:57.351392 140343662851904 train_utils.py:377] train in step: 447
I0712 13:24:57.383293 140343662851904 train_utils.py:377] train in step: 448
I0712 13:24:57.415511 140343662851904 train_utils.py:377] train in step: 449
I0712 13:24:57.447296 140343662851904 train_utils.py:377] train in step: 450
I0712 13:24:57.479310 140343662851904 train_utils.py:377] train in step: 451
I0712 13:24:57.515309 140343662851904 train_utils.py:377] train in step: 452
I0712 13:24:57.547414 140343662851904 train_utils.py:377] train in step: 453
I0712 13:24:57.582678 140343662851904 train_utils.py:377] train in step: 454
I0712 13:24:57.616919 140343662851904 train_utils.py:377] train in step: 455
I0712 13:24:57.654256 140343662851904 train_utils.py:377] train in step: 456
I0712 13:24:57.686422 140343662851904 train_utils.py:377] train in step: 457
I0712 13:24:57.721684 140343662851904 train_utils.py:377] train in step: 458
I0712 13:24:57.752737 140343662851904 train_utils.py:377] train in step: 459
I0712 13:24:57.785271 140343662851904 train_utils.py:377] train in step: 460
I0712 13:24:57.818006 140343662851904 train_utils.py:377] train in step: 461
I0712 13:24:57.849407 140343662851904 train_utils.py:377] train in step: 462
I0712 13:24:57.884686 140343662851904 train_utils.py:377] train in step: 463
I0712 13:24:57.915331 140343662851904 train_utils.py:377] train in step: 464
I0712 13:24:57.947288 140343662851904 train_utils.py:377] train in step: 465
I0712 13:24:57.979234 140343662851904 train_utils.py:377] train in step: 466
I0712 13:24:58.011284 140343662851904 train_utils.py:377] train in step: 467
I0712 13:24:58.044198 140343662851904 train_utils.py:377] train in step: 468
I0712 13:24:58.076986 140343662851904 train_utils.py:377] train in step: 469
I0712 13:24:58.108586 140343662851904 train_utils.py:377] train in step: 470
I0712 13:24:58.139626 140343662851904 train_utils.py:377] train in step: 471
I0712 13:24:58.172599 140343662851904 train_utils.py:377] train in step: 472
I0712 13:24:58.205308 140343662851904 train_utils.py:377] train in step: 473
I0712 13:24:58.237173 140343662851904 train_utils.py:377] train in step: 474
I0712 13:24:58.268837 140343662851904 train_utils.py:377] train in step: 475
I0712 13:24:58.301175 140343662851904 train_utils.py:377] train in step: 476
I0712 13:24:58.338001 140343662851904 train_utils.py:377] train in step: 477
I0712 13:24:58.369585 140343662851904 train_utils.py:377] train in step: 478
I0712 13:24:58.401600 140343662851904 train_utils.py:377] train in step: 479
I0712 13:24:58.435581 140343662851904 train_utils.py:377] train in step: 480
I0712 13:24:58.467512 140343662851904 train_utils.py:377] train in step: 481
I0712 13:24:58.499644 140343662851904 train_utils.py:377] train in step: 482
I0712 13:24:58.531707 140343662851904 train_utils.py:377] train in step: 483
I0712 13:24:58.564067 140343662851904 train_utils.py:377] train in step: 484
I0712 13:24:58.596747 140343662851904 train_utils.py:377] train in step: 485
I0712 13:24:58.630062 140343662851904 train_utils.py:377] train in step: 486
I0712 13:24:58.660331 140343662851904 train_utils.py:377] train in step: 487
I0712 13:24:58.692006 140343662851904 train_utils.py:377] train in step: 488
I0712 13:24:58.724645 140343662851904 train_utils.py:377] train in step: 489
I0712 13:24:58.756030 140343662851904 train_utils.py:377] train in step: 490
I0712 13:24:58.788049 140343662851904 train_utils.py:377] train in step: 491
I0712 13:24:58.820082 140343662851904 train_utils.py:377] train in step: 492
I0712 13:24:58.852116 140343662851904 train_utils.py:377] train in step: 493
I0712 13:24:58.886198 140343662851904 train_utils.py:377] train in step: 494
I0712 13:24:58.917042 140343662851904 train_utils.py:377] train in step: 495
I0712 13:24:58.957042 140343662851904 train_utils.py:377] train in step: 496
I0712 13:24:58.989741 140343662851904 train_utils.py:377] train in step: 497
I0712 13:24:59.027837 140343662851904 train_utils.py:377] train in step: 498
I0712 13:24:59.060285 140343662851904 train_utils.py:377] train in step: 499
I0712 13:24:59.093772 140343662851904 train_utils.py:377] train in step: 500
I0712 13:24:59.126107 140343662851904 train_utils.py:377] train in step: 501
I0712 13:24:59.159904 140343662851904 train_utils.py:377] train in step: 502
I0712 13:24:59.192229 140343662851904 train_utils.py:377] train in step: 503
I0712 13:24:59.224944 140343662851904 train_utils.py:377] train in step: 504
I0712 13:24:59.257268 140343662851904 train_utils.py:377] train in step: 505
I0712 13:24:59.288604 140343662851904 train_utils.py:377] train in step: 506
I0712 13:24:59.320900 140343662851904 train_utils.py:377] train in step: 507
I0712 13:24:59.353036 140343662851904 train_utils.py:377] train in step: 508
I0712 13:24:59.388767 140343662851904 train_utils.py:377] train in step: 509
I0712 13:24:59.419830 140343662851904 train_utils.py:377] train in step: 510
I0712 13:24:59.451645 140343662851904 train_utils.py:377] train in step: 511
I0712 13:24:59.483475 140343662851904 train_utils.py:377] train in step: 512
I0712 13:24:59.517347 140343662851904 train_utils.py:377] train in step: 513
I0712 13:24:59.549856 140343662851904 train_utils.py:377] train in step: 514
I0712 13:24:59.581261 140343662851904 train_utils.py:377] train in step: 515
I0712 13:24:59.613896 140343662851904 train_utils.py:377] train in step: 516
I0712 13:24:59.646424 140343662851904 train_utils.py:377] train in step: 517
I0712 13:24:59.678696 140343662851904 train_utils.py:377] train in step: 518
I0712 13:24:59.710200 140343662851904 train_utils.py:377] train in step: 519
I0712 13:24:59.743790 140343662851904 train_utils.py:377] train in step: 520
I0712 13:24:59.780300 140343662851904 train_utils.py:377] train in step: 521
I0712 13:24:59.813561 140343662851904 train_utils.py:377] train in step: 522
I0712 13:24:59.844341 140343662851904 train_utils.py:377] train in step: 523
I0712 13:24:59.876696 140343662851904 train_utils.py:377] train in step: 524
I0712 13:24:59.908306 140343662851904 train_utils.py:377] train in step: 525
I0712 13:24:59.941603 140343662851904 train_utils.py:377] train in step: 526
I0712 13:24:59.972412 140343662851904 train_utils.py:377] train in step: 527
I0712 13:25:00.004521 140343662851904 train_utils.py:377] train in step: 528
I0712 13:25:00.036206 140343662851904 train_utils.py:377] train in step: 529
I0712 13:25:00.068650 140343662851904 train_utils.py:377] train in step: 530
I0712 13:25:00.100325 140343662851904 train_utils.py:377] train in step: 531
I0712 13:25:00.131872 140343662851904 train_utils.py:377] train in step: 532
I0712 13:25:00.164433 140343662851904 train_utils.py:377] train in step: 533
I0712 13:25:00.195624 140343662851904 train_utils.py:377] train in step: 534
I0712 13:25:00.228788 140343662851904 train_utils.py:377] train in step: 535
I0712 13:25:00.260728 140343662851904 train_utils.py:377] train in step: 536
I0712 13:25:00.292814 140343662851904 train_utils.py:377] train in step: 537
I0712 13:25:00.324719 140343662851904 train_utils.py:377] train in step: 538
I0712 13:25:00.357139 140343662851904 train_utils.py:377] train in step: 539
I0712 13:25:00.400101 140343662851904 train_utils.py:377] train in step: 540
I0712 13:25:00.432551 140343662851904 train_utils.py:377] train in step: 541
I0712 13:25:00.464152 140343662851904 train_utils.py:377] train in step: 542
I0712 13:25:00.496223 140343662851904 train_utils.py:377] train in step: 543
I0712 13:25:00.546209 140343662851904 train_utils.py:377] train in step: 544
I0712 13:25:00.579078 140343662851904 train_utils.py:377] train in step: 545
I0712 13:25:00.611192 140343662851904 train_utils.py:377] train in step: 546
I0712 13:25:00.652844 140343662851904 train_utils.py:377] train in step: 547
I0712 13:25:00.682960 140343662851904 train_utils.py:377] train in step: 548
I0712 13:25:00.733947 140343662851904 train_utils.py:377] train in step: 549
I0712 13:25:00.767301 140343662851904 train_utils.py:377] train in step: 550
I0712 13:25:00.799014 140343662851904 train_utils.py:377] train in step: 551
I0712 13:25:00.833750 140343662851904 train_utils.py:377] train in step: 552
I0712 13:25:00.864314 140343662851904 train_utils.py:377] train in step: 553
I0712 13:25:00.897856 140343662851904 train_utils.py:377] train in step: 554
I0712 13:25:00.932530 140343662851904 train_utils.py:377] train in step: 555
I0712 13:25:00.962810 140343662851904 train_utils.py:377] train in step: 556
I0712 13:25:00.995878 140343662851904 train_utils.py:377] train in step: 557
I0712 13:25:01.025989 140343662851904 train_utils.py:377] train in step: 558
I0712 13:25:01.058302 140343662851904 train_utils.py:377] train in step: 559
I0712 13:25:01.089457 140343662851904 train_utils.py:377] train in step: 560
I0712 13:25:01.123730 140343662851904 train_utils.py:377] train in step: 561
I0712 13:25:01.155446 140343662851904 train_utils.py:377] train in step: 562
I0712 13:25:01.189450 140343662851904 train_utils.py:377] train in step: 563
I0712 13:25:01.220575 140343662851904 train_utils.py:377] train in step: 564
I0712 13:25:01.252497 140343662851904 train_utils.py:377] train in step: 565
I0712 13:25:01.284402 140343662851904 train_utils.py:377] train in step: 566
I0712 13:25:01.317268 140343662851904 train_utils.py:377] train in step: 567
I0712 13:25:01.348968 140343662851904 train_utils.py:377] train in step: 568
I0712 13:25:01.381012 140343662851904 train_utils.py:377] train in step: 569
I0712 13:25:01.414282 140343662851904 train_utils.py:377] train in step: 570
I0712 13:25:01.446142 140343662851904 train_utils.py:377] train in step: 571
I0712 13:25:01.477800 140343662851904 train_utils.py:377] train in step: 572
I0712 13:25:01.510438 140343662851904 train_utils.py:377] train in step: 573
I0712 13:25:01.542247 140343662851904 train_utils.py:377] train in step: 574
I0712 13:25:01.574211 140343662851904 train_utils.py:377] train in step: 575
I0712 13:25:01.606210 140343662851904 train_utils.py:377] train in step: 576
I0712 13:25:01.637943 140343662851904 train_utils.py:377] train in step: 577
I0712 13:25:01.670884 140343662851904 train_utils.py:377] train in step: 578
I0712 13:25:01.702968 140343662851904 train_utils.py:377] train in step: 579
I0712 13:25:01.735879 140343662851904 train_utils.py:377] train in step: 580
I0712 13:25:01.770990 140343662851904 train_utils.py:377] train in step: 581
I0712 13:25:01.806333 140343662851904 train_utils.py:377] train in step: 582
I0712 13:25:01.838551 140343662851904 train_utils.py:377] train in step: 583
I0712 13:25:01.870098 140343662851904 train_utils.py:377] train in step: 584
I0712 13:25:01.902029 140343662851904 train_utils.py:377] train in step: 585
I0712 13:25:01.935192 140343662851904 train_utils.py:377] train in step: 586
I0712 13:25:01.966984 140343662851904 train_utils.py:377] train in step: 587
I0712 13:25:01.998872 140343662851904 train_utils.py:377] train in step: 588
I0712 13:25:02.030328 140343662851904 train_utils.py:377] train in step: 589
I0712 13:25:02.062329 140343662851904 train_utils.py:377] train in step: 590
I0712 13:25:02.094068 140343662851904 train_utils.py:377] train in step: 591
I0712 13:25:02.127659 140343662851904 train_utils.py:377] train in step: 592
I0712 13:25:02.159281 140343662851904 train_utils.py:377] train in step: 593
I0712 13:25:02.191435 140343662851904 train_utils.py:377] train in step: 594
I0712 13:25:02.223863 140343662851904 train_utils.py:377] train in step: 595
I0712 13:25:02.255419 140343662851904 train_utils.py:377] train in step: 596
I0712 13:25:02.287060 140343662851904 train_utils.py:377] train in step: 597
I0712 13:25:02.318944 140343662851904 train_utils.py:377] train in step: 598
I0712 13:25:02.351160 140343662851904 train_utils.py:377] train in step: 599
I0712 13:25:02.382753 140343662851904 train_utils.py:377] train in step: 600
I0712 13:25:02.449905 140343662851904 train_utils.py:396] train in step: 600, loss: 0.7281000018119812, acc: 0.548799991607666
I0712 13:25:05.628428 140343662851904 train_utils.py:411] eval in step: 600, loss: 0.6828, acc: 0.6000
I0712 13:25:05.632786 140343662851904 train_utils.py:421] Testing...
I0712 13:25:08.778340 140343662851904 train_utils.py:424] test in step: 600, loss: 0.6785, acc: 0.4850
I0712 13:25:08.809036 140343662851904 train_utils.py:377] train in step: 601
I0712 13:25:08.831454 140343662851904 train_utils.py:377] train in step: 602
I0712 13:25:08.852902 140343662851904 train_utils.py:377] train in step: 603
I0712 13:25:08.875845 140343662851904 train_utils.py:377] train in step: 604
I0712 13:25:08.905870 140343662851904 train_utils.py:377] train in step: 605
I0712 13:25:08.937323 140343662851904 train_utils.py:377] train in step: 606
I0712 13:25:08.969890 140343662851904 train_utils.py:377] train in step: 607
I0712 13:25:09.000934 140343662851904 train_utils.py:377] train in step: 608
I0712 13:25:09.033125 140343662851904 train_utils.py:377] train in step: 609
I0712 13:25:09.074801 140343662851904 train_utils.py:377] train in step: 610
I0712 13:25:09.110472 140343662851904 train_utils.py:377] train in step: 611
I0712 13:25:09.144867 140343662851904 train_utils.py:377] train in step: 612
I0712 13:25:09.176638 140343662851904 train_utils.py:377] train in step: 613
I0712 13:25:09.211035 140343662851904 train_utils.py:377] train in step: 614
I0712 13:25:09.241724 140343662851904 train_utils.py:377] train in step: 615
I0712 13:25:09.272833 140343662851904 train_utils.py:377] train in step: 616
I0712 13:25:09.305439 140343662851904 train_utils.py:377] train in step: 617
I0712 13:25:09.337934 140343662851904 train_utils.py:377] train in step: 618
I0712 13:25:09.372661 140343662851904 train_utils.py:377] train in step: 619
I0712 13:25:09.404123 140343662851904 train_utils.py:377] train in step: 620
I0712 13:25:09.434700 140343662851904 train_utils.py:377] train in step: 621
I0712 13:25:09.466902 140343662851904 train_utils.py:377] train in step: 622
I0712 13:25:09.499277 140343662851904 train_utils.py:377] train in step: 623
I0712 13:25:09.531070 140343662851904 train_utils.py:377] train in step: 624
I0712 13:25:09.565236 140343662851904 train_utils.py:377] train in step: 625
I0712 13:25:09.595746 140343662851904 train_utils.py:377] train in step: 626
I0712 13:25:09.627688 140343662851904 train_utils.py:377] train in step: 627
I0712 13:25:09.659292 140343662851904 train_utils.py:377] train in step: 628
I0712 13:25:09.693768 140343662851904 train_utils.py:377] train in step: 629
I0712 13:25:09.726664 140343662851904 train_utils.py:377] train in step: 630
I0712 13:25:09.760208 140343662851904 train_utils.py:377] train in step: 631
I0712 13:25:09.793754 140343662851904 train_utils.py:377] train in step: 632
I0712 13:25:09.830383 140343662851904 train_utils.py:377] train in step: 633
I0712 13:25:09.864576 140343662851904 train_utils.py:377] train in step: 634
I0712 13:25:09.897125 140343662851904 train_utils.py:377] train in step: 635
I0712 13:25:09.929152 140343662851904 train_utils.py:377] train in step: 636
I0712 13:25:09.960630 140343662851904 train_utils.py:377] train in step: 637
I0712 13:25:09.993489 140343662851904 train_utils.py:377] train in step: 638
I0712 13:25:10.032243 140343662851904 train_utils.py:377] train in step: 639
I0712 13:25:10.062681 140343662851904 train_utils.py:377] train in step: 640
I0712 13:25:10.100924 140343662851904 train_utils.py:377] train in step: 641
I0712 13:25:10.131555 140343662851904 train_utils.py:377] train in step: 642
I0712 13:25:10.165760 140343662851904 train_utils.py:377] train in step: 643
I0712 13:25:10.211507 140343662851904 train_utils.py:377] train in step: 644
I0712 13:25:10.244405 140343662851904 train_utils.py:377] train in step: 645
I0712 13:25:10.276194 140343662851904 train_utils.py:377] train in step: 646
I0712 13:25:10.307671 140343662851904 train_utils.py:377] train in step: 647
I0712 13:25:10.341397 140343662851904 train_utils.py:377] train in step: 648
I0712 13:25:10.379018 140343662851904 train_utils.py:377] train in step: 649
I0712 13:25:10.414148 140343662851904 train_utils.py:377] train in step: 650
I0712 13:25:10.446391 140343662851904 train_utils.py:377] train in step: 651
I0712 13:25:10.482925 140343662851904 train_utils.py:377] train in step: 652
I0712 13:25:10.516047 140343662851904 train_utils.py:377] train in step: 653
I0712 13:25:10.555898 140343662851904 train_utils.py:377] train in step: 654
I0712 13:25:10.587623 140343662851904 train_utils.py:377] train in step: 655
I0712 13:25:10.619759 140343662851904 train_utils.py:377] train in step: 656
I0712 13:25:10.651905 140343662851904 train_utils.py:377] train in step: 657
I0712 13:25:10.685058 140343662851904 train_utils.py:377] train in step: 658
I0712 13:25:10.718364 140343662851904 train_utils.py:377] train in step: 659
I0712 13:25:10.749258 140343662851904 train_utils.py:377] train in step: 660
I0712 13:25:10.781180 140343662851904 train_utils.py:377] train in step: 661
I0712 13:25:10.813162 140343662851904 train_utils.py:377] train in step: 662
I0712 13:25:10.845862 140343662851904 train_utils.py:377] train in step: 663
I0712 13:25:10.878149 140343662851904 train_utils.py:377] train in step: 664
I0712 13:25:10.912247 140343662851904 train_utils.py:377] train in step: 665
I0712 13:25:10.943660 140343662851904 train_utils.py:377] train in step: 666
I0712 13:25:10.976400 140343662851904 train_utils.py:377] train in step: 667
I0712 13:25:11.007730 140343662851904 train_utils.py:377] train in step: 668
I0712 13:25:11.039634 140343662851904 train_utils.py:377] train in step: 669
I0712 13:25:11.072720 140343662851904 train_utils.py:377] train in step: 670
I0712 13:25:11.103491 140343662851904 train_utils.py:377] train in step: 671
I0712 13:25:11.137180 140343662851904 train_utils.py:377] train in step: 672
I0712 13:25:11.167912 140343662851904 train_utils.py:377] train in step: 673
I0712 13:25:11.201926 140343662851904 train_utils.py:377] train in step: 674
I0712 13:25:11.233873 140343662851904 train_utils.py:377] train in step: 675
I0712 13:25:11.273994 140343662851904 train_utils.py:377] train in step: 676
I0712 13:25:11.309929 140343662851904 train_utils.py:377] train in step: 677
I0712 13:25:11.342792 140343662851904 train_utils.py:377] train in step: 678
I0712 13:25:11.378756 140343662851904 train_utils.py:377] train in step: 679
I0712 13:25:11.410931 140343662851904 train_utils.py:377] train in step: 680
I0712 13:25:11.444685 140343662851904 train_utils.py:377] train in step: 681
I0712 13:25:11.481019 140343662851904 train_utils.py:377] train in step: 682
I0712 13:25:11.510051 140343662851904 train_utils.py:377] train in step: 683
I0712 13:25:11.551744 140343662851904 train_utils.py:377] train in step: 684
I0712 13:25:11.583148 140343662851904 train_utils.py:377] train in step: 685
I0712 13:25:11.619020 140343662851904 train_utils.py:377] train in step: 686
I0712 13:25:11.650648 140343662851904 train_utils.py:377] train in step: 687
I0712 13:25:11.684249 140343662851904 train_utils.py:377] train in step: 688
I0712 13:25:11.715441 140343662851904 train_utils.py:377] train in step: 689
I0712 13:25:11.749756 140343662851904 train_utils.py:377] train in step: 690
I0712 13:25:11.781758 140343662851904 train_utils.py:377] train in step: 691
I0712 13:25:11.813451 140343662851904 train_utils.py:377] train in step: 692
I0712 13:25:11.846790 140343662851904 train_utils.py:377] train in step: 693
I0712 13:25:11.877491 140343662851904 train_utils.py:377] train in step: 694
I0712 13:25:11.910109 140343662851904 train_utils.py:377] train in step: 695
I0712 13:25:11.941806 140343662851904 train_utils.py:377] train in step: 696
I0712 13:25:11.975471 140343662851904 train_utils.py:377] train in step: 697
I0712 13:25:12.013243 140343662851904 train_utils.py:377] train in step: 698
I0712 13:25:12.045415 140343662851904 train_utils.py:377] train in step: 699
I0712 13:25:12.077718 140343662851904 train_utils.py:377] train in step: 700
I0712 13:25:12.109893 140343662851904 train_utils.py:377] train in step: 701
I0712 13:25:12.146236 140343662851904 train_utils.py:377] train in step: 702
I0712 13:25:12.178567 140343662851904 train_utils.py:377] train in step: 703
I0712 13:25:12.209882 140343662851904 train_utils.py:377] train in step: 704
I0712 13:25:12.242046 140343662851904 train_utils.py:377] train in step: 705
I0712 13:25:12.275073 140343662851904 train_utils.py:377] train in step: 706
I0712 13:25:12.309664 140343662851904 train_utils.py:377] train in step: 707
I0712 13:25:12.340532 140343662851904 train_utils.py:377] train in step: 708
I0712 13:25:12.372820 140343662851904 train_utils.py:377] train in step: 709
I0712 13:25:12.404801 140343662851904 train_utils.py:377] train in step: 710
I0712 13:25:12.438425 140343662851904 train_utils.py:377] train in step: 711
I0712 13:25:12.471052 140343662851904 train_utils.py:377] train in step: 712
I0712 13:25:12.502925 140343662851904 train_utils.py:377] train in step: 713
I0712 13:25:12.536289 140343662851904 train_utils.py:377] train in step: 714
I0712 13:25:12.568072 140343662851904 train_utils.py:377] train in step: 715
I0712 13:25:12.600608 140343662851904 train_utils.py:377] train in step: 716
I0712 13:25:12.643373 140343662851904 train_utils.py:377] train in step: 717
I0712 13:25:12.675693 140343662851904 train_utils.py:377] train in step: 718
I0712 13:25:12.708252 140343662851904 train_utils.py:377] train in step: 719
I0712 13:25:12.751398 140343662851904 train_utils.py:377] train in step: 720
I0712 13:25:12.781417 140343662851904 train_utils.py:377] train in step: 721
I0712 13:25:12.813701 140343662851904 train_utils.py:377] train in step: 722
I0712 13:25:12.848596 140343662851904 train_utils.py:377] train in step: 723
I0712 13:25:12.888739 140343662851904 train_utils.py:377] train in step: 724
I0712 13:25:12.919124 140343662851904 train_utils.py:377] train in step: 725
I0712 13:25:12.949001 140343662851904 train_utils.py:377] train in step: 726
I0712 13:25:12.983208 140343662851904 train_utils.py:377] train in step: 727
I0712 13:25:13.015151 140343662851904 train_utils.py:377] train in step: 728
I0712 13:25:13.048257 140343662851904 train_utils.py:377] train in step: 729
I0712 13:25:13.084414 140343662851904 train_utils.py:377] train in step: 730
I0712 13:25:13.115523 140343662851904 train_utils.py:377] train in step: 731
I0712 13:25:13.148972 140343662851904 train_utils.py:377] train in step: 732
I0712 13:25:13.182637 140343662851904 train_utils.py:377] train in step: 733
I0712 13:25:13.213016 140343662851904 train_utils.py:377] train in step: 734
I0712 13:25:13.245391 140343662851904 train_utils.py:377] train in step: 735
I0712 13:25:13.277407 140343662851904 train_utils.py:377] train in step: 736
I0712 13:25:13.311697 140343662851904 train_utils.py:377] train in step: 737
I0712 13:25:13.344448 140343662851904 train_utils.py:377] train in step: 738
I0712 13:25:13.378275 140343662851904 train_utils.py:377] train in step: 739
I0712 13:25:13.418892 140343662851904 train_utils.py:377] train in step: 740
I0712 13:25:13.451871 140343662851904 train_utils.py:377] train in step: 741
I0712 13:25:13.483953 140343662851904 train_utils.py:377] train in step: 742
I0712 13:25:13.517866 140343662851904 train_utils.py:377] train in step: 743
I0712 13:25:13.548968 140343662851904 train_utils.py:377] train in step: 744
I0712 13:25:13.584288 140343662851904 train_utils.py:377] train in step: 745
I0712 13:25:13.617539 140343662851904 train_utils.py:377] train in step: 746
I0712 13:25:13.648905 140343662851904 train_utils.py:377] train in step: 747
I0712 13:25:13.681793 140343662851904 train_utils.py:377] train in step: 748
I0712 13:25:13.714274 140343662851904 train_utils.py:377] train in step: 749
I0712 13:25:13.753510 140343662851904 train_utils.py:377] train in step: 750
I0712 13:25:13.784011 140343662851904 train_utils.py:377] train in step: 751
I0712 13:25:13.816317 140343662851904 train_utils.py:377] train in step: 752
I0712 13:25:13.847940 140343662851904 train_utils.py:377] train in step: 753
I0712 13:25:13.880702 140343662851904 train_utils.py:377] train in step: 754
I0712 13:25:13.911910 140343662851904 train_utils.py:377] train in step: 755
I0712 13:25:13.948373 140343662851904 train_utils.py:377] train in step: 756
I0712 13:25:13.980391 140343662851904 train_utils.py:377] train in step: 757
I0712 13:25:14.021290 140343662851904 train_utils.py:377] train in step: 758
I0712 13:25:14.059380 140343662851904 train_utils.py:377] train in step: 759
I0712 13:25:14.096375 140343662851904 train_utils.py:377] train in step: 760
I0712 13:25:14.127018 140343662851904 train_utils.py:377] train in step: 761
I0712 13:25:14.159208 140343662851904 train_utils.py:377] train in step: 762
I0712 13:25:14.191654 140343662851904 train_utils.py:377] train in step: 763
I0712 13:25:14.225951 140343662851904 train_utils.py:377] train in step: 764
I0712 13:25:14.255900 140343662851904 train_utils.py:377] train in step: 765
I0712 13:25:14.288587 140343662851904 train_utils.py:377] train in step: 766
I0712 13:25:14.320869 140343662851904 train_utils.py:377] train in step: 767
I0712 13:25:14.352627 140343662851904 train_utils.py:377] train in step: 768
I0712 13:25:14.385036 140343662851904 train_utils.py:377] train in step: 769
I0712 13:25:14.417361 140343662851904 train_utils.py:377] train in step: 770
I0712 13:25:14.449693 140343662851904 train_utils.py:377] train in step: 771
I0712 13:25:14.482593 140343662851904 train_utils.py:377] train in step: 772
I0712 13:25:14.514951 140343662851904 train_utils.py:377] train in step: 773
I0712 13:25:14.547220 140343662851904 train_utils.py:377] train in step: 774
I0712 13:25:14.579479 140343662851904 train_utils.py:377] train in step: 775
I0712 13:25:14.611263 140343662851904 train_utils.py:377] train in step: 776
I0712 13:25:14.643420 140343662851904 train_utils.py:377] train in step: 777
I0712 13:25:14.676064 140343662851904 train_utils.py:377] train in step: 778
I0712 13:25:14.708453 140343662851904 train_utils.py:377] train in step: 779
I0712 13:25:14.740373 140343662851904 train_utils.py:377] train in step: 780
I0712 13:25:14.773816 140343662851904 train_utils.py:377] train in step: 781
I0712 13:25:14.807255 140343662851904 train_utils.py:377] train in step: 782
I0712 13:25:14.838903 140343662851904 train_utils.py:377] train in step: 783
I0712 13:25:14.872143 140343662851904 train_utils.py:377] train in step: 784
I0712 13:25:14.903066 140343662851904 train_utils.py:377] train in step: 785
I0712 13:25:14.935462 140343662851904 train_utils.py:377] train in step: 786
I0712 13:25:14.967196 140343662851904 train_utils.py:377] train in step: 787
I0712 13:25:14.998923 140343662851904 train_utils.py:377] train in step: 788
I0712 13:25:15.032601 140343662851904 train_utils.py:377] train in step: 789
I0712 13:25:15.063948 140343662851904 train_utils.py:377] train in step: 790
I0712 13:25:15.095280 140343662851904 train_utils.py:377] train in step: 791
I0712 13:25:15.129065 140343662851904 train_utils.py:377] train in step: 792
I0712 13:25:15.161818 140343662851904 train_utils.py:377] train in step: 793
I0712 13:25:15.193317 140343662851904 train_utils.py:377] train in step: 794
I0712 13:25:15.225325 140343662851904 train_utils.py:377] train in step: 795
I0712 13:25:15.257694 140343662851904 train_utils.py:377] train in step: 796
I0712 13:25:15.290872 140343662851904 train_utils.py:377] train in step: 797
I0712 13:25:15.324228 140343662851904 train_utils.py:377] train in step: 798
I0712 13:25:15.356405 140343662851904 train_utils.py:377] train in step: 799
I0712 13:25:15.392379 140343662851904 train_utils.py:377] train in step: 800
I0712 13:25:15.459470 140343662851904 train_utils.py:396] train in step: 800, loss: 0.7001000046730042, acc: 0.5388000011444092
I0712 13:25:18.732486 140343662851904 train_utils.py:411] eval in step: 800, loss: 0.8405, acc: 0.4850
I0712 13:25:18.737140 140343662851904 train_utils.py:421] Testing...
I0712 13:25:21.931125 140343662851904 train_utils.py:424] test in step: 800, loss: 0.8059, acc: 0.5150
I0712 13:25:21.961040 140343662851904 train_utils.py:377] train in step: 801
I0712 13:25:21.987227 140343662851904 train_utils.py:377] train in step: 802
I0712 13:25:22.008578 140343662851904 train_utils.py:377] train in step: 803
I0712 13:25:22.040817 140343662851904 train_utils.py:377] train in step: 804
I0712 13:25:22.078236 140343662851904 train_utils.py:377] train in step: 805
I0712 13:25:22.108578 140343662851904 train_utils.py:377] train in step: 806
I0712 13:25:22.140445 140343662851904 train_utils.py:377] train in step: 807
I0712 13:25:22.172635 140343662851904 train_utils.py:377] train in step: 808
I0712 13:25:22.212368 140343662851904 train_utils.py:377] train in step: 809
I0712 13:25:22.242991 140343662851904 train_utils.py:377] train in step: 810
I0712 13:25:22.278095 140343662851904 train_utils.py:377] train in step: 811
I0712 13:25:22.310274 140343662851904 train_utils.py:377] train in step: 812
I0712 13:25:22.342051 140343662851904 train_utils.py:377] train in step: 813
I0712 13:25:22.373685 140343662851904 train_utils.py:377] train in step: 814
I0712 13:25:22.404893 140343662851904 train_utils.py:377] train in step: 815
I0712 13:25:22.436718 140343662851904 train_utils.py:377] train in step: 816
I0712 13:25:22.468705 140343662851904 train_utils.py:377] train in step: 817
I0712 13:25:22.502399 140343662851904 train_utils.py:377] train in step: 818
I0712 13:25:22.534114 140343662851904 train_utils.py:377] train in step: 819
I0712 13:25:22.565728 140343662851904 train_utils.py:377] train in step: 820
I0712 13:25:22.598779 140343662851904 train_utils.py:377] train in step: 821
I0712 13:25:22.630027 140343662851904 train_utils.py:377] train in step: 822
I0712 13:25:22.664526 140343662851904 train_utils.py:377] train in step: 823
I0712 13:25:22.705639 140343662851904 train_utils.py:377] train in step: 824
I0712 13:25:22.738714 140343662851904 train_utils.py:377] train in step: 825
I0712 13:25:22.770575 140343662851904 train_utils.py:377] train in step: 826
I0712 13:25:22.803901 140343662851904 train_utils.py:377] train in step: 827
I0712 13:25:22.840921 140343662851904 train_utils.py:377] train in step: 828
I0712 13:25:22.872641 140343662851904 train_utils.py:377] train in step: 829
I0712 13:25:22.903834 140343662851904 train_utils.py:377] train in step: 830
I0712 13:25:22.935843 140343662851904 train_utils.py:377] train in step: 831
I0712 13:25:22.968473 140343662851904 train_utils.py:377] train in step: 832
I0712 13:25:23.000214 140343662851904 train_utils.py:377] train in step: 833
I0712 13:25:23.031930 140343662851904 train_utils.py:377] train in step: 834
I0712 13:25:23.064574 140343662851904 train_utils.py:377] train in step: 835
I0712 13:25:23.096620 140343662851904 train_utils.py:377] train in step: 836
I0712 13:25:23.130601 140343662851904 train_utils.py:377] train in step: 837
I0712 13:25:23.163500 140343662851904 train_utils.py:377] train in step: 838
I0712 13:25:23.195866 140343662851904 train_utils.py:377] train in step: 839
I0712 13:25:23.227577 140343662851904 train_utils.py:377] train in step: 840
I0712 13:25:23.259897 140343662851904 train_utils.py:377] train in step: 841
I0712 13:25:23.293544 140343662851904 train_utils.py:377] train in step: 842
I0712 13:25:23.325282 140343662851904 train_utils.py:377] train in step: 843
I0712 13:25:23.370417 140343662851904 train_utils.py:377] train in step: 844
I0712 13:25:23.409523 140343662851904 train_utils.py:377] train in step: 845
I0712 13:25:23.443355 140343662851904 train_utils.py:377] train in step: 846
I0712 13:25:23.475578 140343662851904 train_utils.py:377] train in step: 847
I0712 13:25:23.509603 140343662851904 train_utils.py:377] train in step: 848
I0712 13:25:23.541450 140343662851904 train_utils.py:377] train in step: 849
I0712 13:25:23.577684 140343662851904 train_utils.py:377] train in step: 850
I0712 13:25:23.609372 140343662851904 train_utils.py:377] train in step: 851
I0712 13:25:23.648527 140343662851904 train_utils.py:377] train in step: 852
I0712 13:25:23.679967 140343662851904 train_utils.py:377] train in step: 853
I0712 13:25:23.711650 140343662851904 train_utils.py:377] train in step: 854
I0712 13:25:23.745246 140343662851904 train_utils.py:377] train in step: 855
I0712 13:25:23.777083 140343662851904 train_utils.py:377] train in step: 856
I0712 13:25:23.809821 140343662851904 train_utils.py:377] train in step: 857
I0712 13:25:23.841683 140343662851904 train_utils.py:377] train in step: 858
I0712 13:25:23.873832 140343662851904 train_utils.py:377] train in step: 859
I0712 13:25:23.906825 140343662851904 train_utils.py:377] train in step: 860
I0712 13:25:23.939479 140343662851904 train_utils.py:377] train in step: 861
I0712 13:25:23.972041 140343662851904 train_utils.py:377] train in step: 862
I0712 13:25:24.003676 140343662851904 train_utils.py:377] train in step: 863
I0712 13:25:24.035469 140343662851904 train_utils.py:377] train in step: 864
I0712 13:25:24.069129 140343662851904 train_utils.py:377] train in step: 865
I0712 13:25:24.103624 140343662851904 train_utils.py:377] train in step: 866
I0712 13:25:24.135663 140343662851904 train_utils.py:377] train in step: 867
I0712 13:25:24.167869 140343662851904 train_utils.py:377] train in step: 868
I0712 13:25:24.200132 140343662851904 train_utils.py:377] train in step: 869
I0712 13:25:24.232127 140343662851904 train_utils.py:377] train in step: 870
I0712 13:25:24.266856 140343662851904 train_utils.py:377] train in step: 871
I0712 13:25:24.298000 140343662851904 train_utils.py:377] train in step: 872
I0712 13:25:24.330026 140343662851904 train_utils.py:377] train in step: 873
I0712 13:25:24.362132 140343662851904 train_utils.py:377] train in step: 874
I0712 13:25:24.394229 140343662851904 train_utils.py:377] train in step: 875
I0712 13:25:24.428246 140343662851904 train_utils.py:377] train in step: 876
I0712 13:25:24.459847 140343662851904 train_utils.py:377] train in step: 877
I0712 13:25:24.491715 140343662851904 train_utils.py:377] train in step: 878
I0712 13:25:24.523375 140343662851904 train_utils.py:377] train in step: 879
I0712 13:25:24.555449 140343662851904 train_utils.py:377] train in step: 880
I0712 13:25:24.588336 140343662851904 train_utils.py:377] train in step: 881
I0712 13:25:24.621476 140343662851904 train_utils.py:377] train in step: 882
I0712 13:25:24.652288 140343662851904 train_utils.py:377] train in step: 883
I0712 13:25:24.686592 140343662851904 train_utils.py:377] train in step: 884
I0712 13:25:24.726067 140343662851904 train_utils.py:377] train in step: 885
I0712 13:25:24.758739 140343662851904 train_utils.py:377] train in step: 886
I0712 13:25:24.790792 140343662851904 train_utils.py:377] train in step: 887
I0712 13:25:24.822131 140343662851904 train_utils.py:377] train in step: 888
I0712 13:25:24.854870 140343662851904 train_utils.py:377] train in step: 889
I0712 13:25:24.889721 140343662851904 train_utils.py:377] train in step: 890
I0712 13:25:24.921007 140343662851904 train_utils.py:377] train in step: 891
I0712 13:25:24.953044 140343662851904 train_utils.py:377] train in step: 892
I0712 13:25:24.985425 140343662851904 train_utils.py:377] train in step: 893
I0712 13:25:25.017340 140343662851904 train_utils.py:377] train in step: 894
I0712 13:25:25.050555 140343662851904 train_utils.py:377] train in step: 895
I0712 13:25:25.082421 140343662851904 train_utils.py:377] train in step: 896
I0712 13:25:25.114788 140343662851904 train_utils.py:377] train in step: 897
I0712 13:25:25.148094 140343662851904 train_utils.py:377] train in step: 898
I0712 13:25:25.178975 140343662851904 train_utils.py:377] train in step: 899
I0712 13:25:25.212233 140343662851904 train_utils.py:377] train in step: 900
I0712 13:25:25.244211 140343662851904 train_utils.py:377] train in step: 901
I0712 13:25:25.275688 140343662851904 train_utils.py:377] train in step: 902
I0712 13:25:25.309218 140343662851904 train_utils.py:377] train in step: 903
I0712 13:25:25.341208 140343662851904 train_utils.py:377] train in step: 904
I0712 13:25:25.372846 140343662851904 train_utils.py:377] train in step: 905
I0712 13:25:25.408798 140343662851904 train_utils.py:377] train in step: 906
I0712 13:25:25.440749 140343662851904 train_utils.py:377] train in step: 907
I0712 13:25:25.473139 140343662851904 train_utils.py:377] train in step: 908
I0712 13:25:25.505148 140343662851904 train_utils.py:377] train in step: 909
I0712 13:25:25.536935 140343662851904 train_utils.py:377] train in step: 910
I0712 13:25:25.569701 140343662851904 train_utils.py:377] train in step: 911
I0712 13:25:25.601634 140343662851904 train_utils.py:377] train in step: 912
I0712 13:25:25.633437 140343662851904 train_utils.py:377] train in step: 913
I0712 13:25:25.665840 140343662851904 train_utils.py:377] train in step: 914
I0712 13:25:25.697104 140343662851904 train_utils.py:377] train in step: 915
I0712 13:25:25.729147 140343662851904 train_utils.py:377] train in step: 916
I0712 13:25:25.761023 140343662851904 train_utils.py:377] train in step: 917
I0712 13:25:25.792968 140343662851904 train_utils.py:377] train in step: 918
I0712 13:25:25.824928 140343662851904 train_utils.py:377] train in step: 919
I0712 13:25:25.856852 140343662851904 train_utils.py:377] train in step: 920
I0712 13:25:25.889513 140343662851904 train_utils.py:377] train in step: 921
I0712 13:25:25.921312 140343662851904 train_utils.py:377] train in step: 922
I0712 13:25:25.953208 140343662851904 train_utils.py:377] train in step: 923
I0712 13:25:25.985569 140343662851904 train_utils.py:377] train in step: 924
I0712 13:25:26.017369 140343662851904 train_utils.py:377] train in step: 925
I0712 13:25:26.051326 140343662851904 train_utils.py:377] train in step: 926
I0712 13:25:26.091115 140343662851904 train_utils.py:377] train in step: 927
I0712 13:25:26.122862 140343662851904 train_utils.py:377] train in step: 928
I0712 13:25:26.157903 140343662851904 train_utils.py:377] train in step: 929
I0712 13:25:26.189022 140343662851904 train_utils.py:377] train in step: 930
I0712 13:25:26.221081 140343662851904 train_utils.py:377] train in step: 931
I0712 13:25:26.257775 140343662851904 train_utils.py:377] train in step: 932
I0712 13:25:26.291443 140343662851904 train_utils.py:377] train in step: 933
I0712 13:25:26.322932 140343662851904 train_utils.py:377] train in step: 934
I0712 13:25:26.354989 140343662851904 train_utils.py:377] train in step: 935
I0712 13:25:26.386383 140343662851904 train_utils.py:377] train in step: 936
I0712 13:25:26.418698 140343662851904 train_utils.py:377] train in step: 937
I0712 13:25:26.452245 140343662851904 train_utils.py:377] train in step: 938
I0712 13:25:26.485745 140343662851904 train_utils.py:377] train in step: 939
I0712 13:25:26.517833 140343662851904 train_utils.py:377] train in step: 940
I0712 13:25:26.551841 140343662851904 train_utils.py:377] train in step: 941
I0712 13:25:26.583007 140343662851904 train_utils.py:377] train in step: 942
I0712 13:25:26.617020 140343662851904 train_utils.py:377] train in step: 943
I0712 13:25:26.647585 140343662851904 train_utils.py:377] train in step: 944
I0712 13:25:26.679806 140343662851904 train_utils.py:377] train in step: 945
I0712 13:25:26.713196 140343662851904 train_utils.py:377] train in step: 946
I0712 13:25:26.745595 140343662851904 train_utils.py:377] train in step: 947
I0712 13:25:26.792968 140343662851904 train_utils.py:377] train in step: 948
I0712 13:25:26.832960 140343662851904 train_utils.py:377] train in step: 949
I0712 13:25:26.865482 140343662851904 train_utils.py:377] train in step: 950
I0712 13:25:26.899637 140343662851904 train_utils.py:377] train in step: 951
I0712 13:25:26.931221 140343662851904 train_utils.py:377] train in step: 952
I0712 13:25:26.962603 140343662851904 train_utils.py:377] train in step: 953
I0712 13:25:26.994599 140343662851904 train_utils.py:377] train in step: 954
I0712 13:25:27.025831 140343662851904 train_utils.py:377] train in step: 955
I0712 13:25:27.058194 140343662851904 train_utils.py:377] train in step: 956
I0712 13:25:27.090988 140343662851904 train_utils.py:377] train in step: 957
I0712 13:25:27.123172 140343662851904 train_utils.py:377] train in step: 958
I0712 13:25:27.155609 140343662851904 train_utils.py:377] train in step: 959
I0712 13:25:27.186656 140343662851904 train_utils.py:377] train in step: 960
I0712 13:25:27.218183 140343662851904 train_utils.py:377] train in step: 961
I0712 13:25:27.250213 140343662851904 train_utils.py:377] train in step: 962
I0712 13:25:27.283107 140343662851904 train_utils.py:377] train in step: 963
I0712 13:25:27.315029 140343662851904 train_utils.py:377] train in step: 964
I0712 13:25:27.346209 140343662851904 train_utils.py:377] train in step: 965
I0712 13:25:27.378496 140343662851904 train_utils.py:377] train in step: 966
I0712 13:25:27.410959 140343662851904 train_utils.py:377] train in step: 967
I0712 13:25:27.444339 140343662851904 train_utils.py:377] train in step: 968
I0712 13:25:27.479844 140343662851904 train_utils.py:377] train in step: 969
I0712 13:25:27.512581 140343662851904 train_utils.py:377] train in step: 970
I0712 13:25:27.544555 140343662851904 train_utils.py:377] train in step: 971
I0712 13:25:27.576419 140343662851904 train_utils.py:377] train in step: 972
I0712 13:25:27.608617 140343662851904 train_utils.py:377] train in step: 973
I0712 13:25:27.640407 140343662851904 train_utils.py:377] train in step: 974
I0712 13:25:27.672530 140343662851904 train_utils.py:377] train in step: 975
I0712 13:25:27.704492 140343662851904 train_utils.py:377] train in step: 976
I0712 13:25:27.736458 140343662851904 train_utils.py:377] train in step: 977
I0712 13:25:27.770143 140343662851904 train_utils.py:377] train in step: 978
I0712 13:25:27.802418 140343662851904 train_utils.py:377] train in step: 979
I0712 13:25:27.834921 140343662851904 train_utils.py:377] train in step: 980
I0712 13:25:27.866511 140343662851904 train_utils.py:377] train in step: 981
I0712 13:25:27.899244 140343662851904 train_utils.py:377] train in step: 982
I0712 13:25:27.931271 140343662851904 train_utils.py:377] train in step: 983
I0712 13:25:27.963736 140343662851904 train_utils.py:377] train in step: 984
I0712 13:25:27.995177 140343662851904 train_utils.py:377] train in step: 985
I0712 13:25:28.026951 140343662851904 train_utils.py:377] train in step: 986
I0712 13:25:28.065862 140343662851904 train_utils.py:377] train in step: 987
I0712 13:25:28.096616 140343662851904 train_utils.py:377] train in step: 988
I0712 13:25:28.129378 140343662851904 train_utils.py:377] train in step: 989
I0712 13:25:28.161146 140343662851904 train_utils.py:377] train in step: 990
I0712 13:25:28.193232 140343662851904 train_utils.py:377] train in step: 991
I0712 13:25:28.227775 140343662851904 train_utils.py:377] train in step: 992
I0712 13:25:28.260007 140343662851904 train_utils.py:377] train in step: 993
I0712 13:25:28.293050 140343662851904 train_utils.py:377] train in step: 994
I0712 13:25:28.323893 140343662851904 train_utils.py:377] train in step: 995
I0712 13:25:28.355912 140343662851904 train_utils.py:377] train in step: 996
I0712 13:25:28.388105 140343662851904 train_utils.py:377] train in step: 997
I0712 13:25:28.420257 140343662851904 train_utils.py:377] train in step: 998
I0712 13:25:28.453325 140343662851904 train_utils.py:377] train in step: 999
I0712 13:25:28.484055 140343662851904 train_utils.py:377] train in step: 1000
I0712 13:25:28.487905 140343662851904 checkpoints.py:120] Saving checkpoint at step: 1000
I0712 13:25:28.619478 140343662851904 checkpoints.py:149] Saved checkpoint at trained_models/matching/linformer/checkpoint_1000
I0712 13:25:28.665164 140343662851904 train_utils.py:396] train in step: 1000, loss: 0.6432999968528748, acc: 0.6311999559402466
I0712 13:25:31.808284 140343662851904 train_utils.py:411] eval in step: 1000, loss: 0.8351, acc: 0.5000
I0712 13:25:31.813860 140343662851904 train_utils.py:421] Testing...
I0712 13:25:35.005712 140343662851904 train_utils.py:424] test in step: 1000, loss: 0.7390, acc: 0.5850
